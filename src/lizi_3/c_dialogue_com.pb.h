// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: c_dialogue_com.proto

#ifndef PROTOBUF_c_5fdialogue_5fcom_2eproto__INCLUDED
#define PROTOBUF_c_5fdialogue_5fcom_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "b_error.pb.h"
// @@protoc_insertion_point(includes)
namespace b_error {
class info;
class infoDefaultTypeInternal;
extern infoDefaultTypeInternal _info_default_instance_;
}  // namespace b_error
namespace c_dialogue_com {
class dialogue_login_rq;
class dialogue_login_rqDefaultTypeInternal;
extern dialogue_login_rqDefaultTypeInternal _dialogue_login_rq_default_instance_;
class dialogue_login_rs;
class dialogue_login_rsDefaultTypeInternal;
extern dialogue_login_rsDefaultTypeInternal _dialogue_login_rs_default_instance_;
class dialogue_seek_rq;
class dialogue_seek_rqDefaultTypeInternal;
extern dialogue_seek_rqDefaultTypeInternal _dialogue_seek_rq_default_instance_;
class dialogue_seek_rs;
class dialogue_seek_rsDefaultTypeInternal;
extern dialogue_seek_rsDefaultTypeInternal _dialogue_seek_rs_default_instance_;
class dialogue_talk_nt;
class dialogue_talk_ntDefaultTypeInternal;
extern dialogue_talk_ntDefaultTypeInternal _dialogue_talk_nt_default_instance_;
class dialogue_talk_rq;
class dialogue_talk_rqDefaultTypeInternal;
extern dialogue_talk_rqDefaultTypeInternal _dialogue_talk_rq_default_instance_;
class dialogue_talk_rs;
class dialogue_talk_rsDefaultTypeInternal;
extern dialogue_talk_rsDefaultTypeInternal _dialogue_talk_rs_default_instance_;
}  // namespace c_dialogue_com

namespace c_dialogue_com {

namespace protobuf_c_5fdialogue_5fcom_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_c_5fdialogue_5fcom_2eproto

enum dialogue_login_rq_msg {
  dialogue_login_rq_msg_id = 39845889
};
bool dialogue_login_rq_msg_IsValid(int value);
const dialogue_login_rq_msg dialogue_login_rq_msg_msg_MIN = dialogue_login_rq_msg_id;
const dialogue_login_rq_msg dialogue_login_rq_msg_msg_MAX = dialogue_login_rq_msg_id;
const int dialogue_login_rq_msg_msg_ARRAYSIZE = dialogue_login_rq_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* dialogue_login_rq_msg_descriptor();
inline const ::std::string& dialogue_login_rq_msg_Name(dialogue_login_rq_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    dialogue_login_rq_msg_descriptor(), value);
}
inline bool dialogue_login_rq_msg_Parse(
    const ::std::string& name, dialogue_login_rq_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<dialogue_login_rq_msg>(
    dialogue_login_rq_msg_descriptor(), name, value);
}
enum dialogue_login_rs_msg {
  dialogue_login_rs_msg_id = 39845890
};
bool dialogue_login_rs_msg_IsValid(int value);
const dialogue_login_rs_msg dialogue_login_rs_msg_msg_MIN = dialogue_login_rs_msg_id;
const dialogue_login_rs_msg dialogue_login_rs_msg_msg_MAX = dialogue_login_rs_msg_id;
const int dialogue_login_rs_msg_msg_ARRAYSIZE = dialogue_login_rs_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* dialogue_login_rs_msg_descriptor();
inline const ::std::string& dialogue_login_rs_msg_Name(dialogue_login_rs_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    dialogue_login_rs_msg_descriptor(), value);
}
inline bool dialogue_login_rs_msg_Parse(
    const ::std::string& name, dialogue_login_rs_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<dialogue_login_rs_msg>(
    dialogue_login_rs_msg_descriptor(), name, value);
}
enum dialogue_seek_rq_msg {
  dialogue_seek_rq_msg_id = 39845905
};
bool dialogue_seek_rq_msg_IsValid(int value);
const dialogue_seek_rq_msg dialogue_seek_rq_msg_msg_MIN = dialogue_seek_rq_msg_id;
const dialogue_seek_rq_msg dialogue_seek_rq_msg_msg_MAX = dialogue_seek_rq_msg_id;
const int dialogue_seek_rq_msg_msg_ARRAYSIZE = dialogue_seek_rq_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* dialogue_seek_rq_msg_descriptor();
inline const ::std::string& dialogue_seek_rq_msg_Name(dialogue_seek_rq_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    dialogue_seek_rq_msg_descriptor(), value);
}
inline bool dialogue_seek_rq_msg_Parse(
    const ::std::string& name, dialogue_seek_rq_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<dialogue_seek_rq_msg>(
    dialogue_seek_rq_msg_descriptor(), name, value);
}
enum dialogue_seek_rs_msg {
  dialogue_seek_rs_msg_id = 39845906
};
bool dialogue_seek_rs_msg_IsValid(int value);
const dialogue_seek_rs_msg dialogue_seek_rs_msg_msg_MIN = dialogue_seek_rs_msg_id;
const dialogue_seek_rs_msg dialogue_seek_rs_msg_msg_MAX = dialogue_seek_rs_msg_id;
const int dialogue_seek_rs_msg_msg_ARRAYSIZE = dialogue_seek_rs_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* dialogue_seek_rs_msg_descriptor();
inline const ::std::string& dialogue_seek_rs_msg_Name(dialogue_seek_rs_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    dialogue_seek_rs_msg_descriptor(), value);
}
inline bool dialogue_seek_rs_msg_Parse(
    const ::std::string& name, dialogue_seek_rs_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<dialogue_seek_rs_msg>(
    dialogue_seek_rs_msg_descriptor(), name, value);
}
enum dialogue_talk_rq_msg {
  dialogue_talk_rq_msg_id = 39845921
};
bool dialogue_talk_rq_msg_IsValid(int value);
const dialogue_talk_rq_msg dialogue_talk_rq_msg_msg_MIN = dialogue_talk_rq_msg_id;
const dialogue_talk_rq_msg dialogue_talk_rq_msg_msg_MAX = dialogue_talk_rq_msg_id;
const int dialogue_talk_rq_msg_msg_ARRAYSIZE = dialogue_talk_rq_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* dialogue_talk_rq_msg_descriptor();
inline const ::std::string& dialogue_talk_rq_msg_Name(dialogue_talk_rq_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    dialogue_talk_rq_msg_descriptor(), value);
}
inline bool dialogue_talk_rq_msg_Parse(
    const ::std::string& name, dialogue_talk_rq_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<dialogue_talk_rq_msg>(
    dialogue_talk_rq_msg_descriptor(), name, value);
}
enum dialogue_talk_rs_msg {
  dialogue_talk_rs_msg_id = 39845922
};
bool dialogue_talk_rs_msg_IsValid(int value);
const dialogue_talk_rs_msg dialogue_talk_rs_msg_msg_MIN = dialogue_talk_rs_msg_id;
const dialogue_talk_rs_msg dialogue_talk_rs_msg_msg_MAX = dialogue_talk_rs_msg_id;
const int dialogue_talk_rs_msg_msg_ARRAYSIZE = dialogue_talk_rs_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* dialogue_talk_rs_msg_descriptor();
inline const ::std::string& dialogue_talk_rs_msg_Name(dialogue_talk_rs_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    dialogue_talk_rs_msg_descriptor(), value);
}
inline bool dialogue_talk_rs_msg_Parse(
    const ::std::string& name, dialogue_talk_rs_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<dialogue_talk_rs_msg>(
    dialogue_talk_rs_msg_descriptor(), name, value);
}
enum dialogue_talk_nt_msg {
  dialogue_talk_nt_msg_id = 39845923
};
bool dialogue_talk_nt_msg_IsValid(int value);
const dialogue_talk_nt_msg dialogue_talk_nt_msg_msg_MIN = dialogue_talk_nt_msg_id;
const dialogue_talk_nt_msg dialogue_talk_nt_msg_msg_MAX = dialogue_talk_nt_msg_id;
const int dialogue_talk_nt_msg_msg_ARRAYSIZE = dialogue_talk_nt_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* dialogue_talk_nt_msg_descriptor();
inline const ::std::string& dialogue_talk_nt_msg_Name(dialogue_talk_nt_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    dialogue_talk_nt_msg_descriptor(), value);
}
inline bool dialogue_talk_nt_msg_Parse(
    const ::std::string& name, dialogue_talk_nt_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<dialogue_talk_nt_msg>(
    dialogue_talk_nt_msg_descriptor(), name, value);
}
// ===================================================================

class dialogue_login_rq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_dialogue_com.dialogue_login_rq) */ {
 public:
  dialogue_login_rq();
  virtual ~dialogue_login_rq();

  dialogue_login_rq(const dialogue_login_rq& from);

  inline dialogue_login_rq& operator=(const dialogue_login_rq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dialogue_login_rq& default_instance();

  static inline const dialogue_login_rq* internal_default_instance() {
    return reinterpret_cast<const dialogue_login_rq*>(
               &_dialogue_login_rq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(dialogue_login_rq* other);

  // implements Message ----------------------------------------------

  inline dialogue_login_rq* New() const PROTOBUF_FINAL { return New(NULL); }

  dialogue_login_rq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const dialogue_login_rq& from);
  void MergeFrom(const dialogue_login_rq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(dialogue_login_rq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef dialogue_login_rq_msg msg;
  static const msg id =
    dialogue_login_rq_msg_id;
  static inline bool msg_IsValid(int value) {
    return dialogue_login_rq_msg_IsValid(value);
  }
  static const msg msg_MIN =
    dialogue_login_rq_msg_msg_MIN;
  static const msg msg_MAX =
    dialogue_login_rq_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    dialogue_login_rq_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return dialogue_login_rq_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return dialogue_login_rq_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return dialogue_login_rq_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string user_nick = 2 [default = ""];
  bool has_user_nick() const;
  void clear_user_nick();
  static const int kUserNickFieldNumber = 2;
  const ::std::string& user_nick() const;
  void set_user_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_user_nick(::std::string&& value);
  #endif
  void set_user_nick(const char* value);
  void set_user_nick(const char* value, size_t size);
  ::std::string* mutable_user_nick();
  ::std::string* release_user_nick();
  void set_allocated_user_nick(::std::string* user_nick);

  // optional string user_password = 3 [default = ""];
  bool has_user_password() const;
  void clear_user_password();
  static const int kUserPasswordFieldNumber = 3;
  const ::std::string& user_password() const;
  void set_user_password(const ::std::string& value);
  #if LANG_CXX11
  void set_user_password(::std::string&& value);
  #endif
  void set_user_password(const char* value);
  void set_user_password(const char* value, size_t size);
  ::std::string* mutable_user_password();
  ::std::string* release_user_password();
  void set_allocated_user_password(::std::string* user_password);

  // optional uint64 user_id = 1 [default = 0];
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:c_dialogue_com.dialogue_login_rq)
 private:
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_user_nick();
  void clear_has_user_nick();
  void set_has_user_password();
  void clear_has_user_password();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_nick_;
  ::google::protobuf::internal::ArenaStringPtr user_password_;
  ::google::protobuf::uint64 user_id_;
  friend struct protobuf_c_5fdialogue_5fcom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class dialogue_login_rs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_dialogue_com.dialogue_login_rs) */ {
 public:
  dialogue_login_rs();
  virtual ~dialogue_login_rs();

  dialogue_login_rs(const dialogue_login_rs& from);

  inline dialogue_login_rs& operator=(const dialogue_login_rs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dialogue_login_rs& default_instance();

  static inline const dialogue_login_rs* internal_default_instance() {
    return reinterpret_cast<const dialogue_login_rs*>(
               &_dialogue_login_rs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(dialogue_login_rs* other);

  // implements Message ----------------------------------------------

  inline dialogue_login_rs* New() const PROTOBUF_FINAL { return New(NULL); }

  dialogue_login_rs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const dialogue_login_rs& from);
  void MergeFrom(const dialogue_login_rs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(dialogue_login_rs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef dialogue_login_rs_msg msg;
  static const msg id =
    dialogue_login_rs_msg_id;
  static inline bool msg_IsValid(int value) {
    return dialogue_login_rs_msg_IsValid(value);
  }
  static const msg msg_MIN =
    dialogue_login_rs_msg_msg_MIN;
  static const msg msg_MAX =
    dialogue_login_rs_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    dialogue_login_rs_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return dialogue_login_rs_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return dialogue_login_rs_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return dialogue_login_rs_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string user_nick = 3 [default = ""];
  bool has_user_nick() const;
  void clear_user_nick();
  static const int kUserNickFieldNumber = 3;
  const ::std::string& user_nick() const;
  void set_user_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_user_nick(::std::string&& value);
  #endif
  void set_user_nick(const char* value);
  void set_user_nick(const char* value, size_t size);
  ::std::string* mutable_user_nick();
  ::std::string* release_user_nick();
  void set_allocated_user_nick(::std::string* user_nick);

  // optional bytes login_desc = 5 [default = ""];
  bool has_login_desc() const;
  void clear_login_desc();
  static const int kLoginDescFieldNumber = 5;
  const ::std::string& login_desc() const;
  void set_login_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_login_desc(::std::string&& value);
  #endif
  void set_login_desc(const char* value);
  void set_login_desc(const void* value, size_t size);
  ::std::string* mutable_login_desc();
  ::std::string* release_login_desc();
  void set_allocated_login_desc(::std::string* login_desc);

  // optional .b_error.info error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::b_error::info& error() const;
  ::b_error::info* mutable_error();
  ::b_error::info* release_error();
  void set_allocated_error(::b_error::info* error);

  // optional uint64 user_id = 2 [default = 0];
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // optional uint32 login_state = 4 [default = 0];
  bool has_login_state() const;
  void clear_login_state();
  static const int kLoginStateFieldNumber = 4;
  ::google::protobuf::uint32 login_state() const;
  void set_login_state(::google::protobuf::uint32 value);

  // optional uint32 socket = 6 [default = 0];
  bool has_socket() const;
  void clear_socket();
  static const int kSocketFieldNumber = 6;
  ::google::protobuf::uint32 socket() const;
  void set_socket(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_dialogue_com.dialogue_login_rs)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_user_nick();
  void clear_has_user_nick();
  void set_has_login_state();
  void clear_has_login_state();
  void set_has_login_desc();
  void clear_has_login_desc();
  void set_has_socket();
  void clear_has_socket();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_nick_;
  ::google::protobuf::internal::ArenaStringPtr login_desc_;
  ::b_error::info* error_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint32 login_state_;
  ::google::protobuf::uint32 socket_;
  friend struct protobuf_c_5fdialogue_5fcom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class dialogue_seek_rq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_dialogue_com.dialogue_seek_rq) */ {
 public:
  dialogue_seek_rq();
  virtual ~dialogue_seek_rq();

  dialogue_seek_rq(const dialogue_seek_rq& from);

  inline dialogue_seek_rq& operator=(const dialogue_seek_rq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dialogue_seek_rq& default_instance();

  static inline const dialogue_seek_rq* internal_default_instance() {
    return reinterpret_cast<const dialogue_seek_rq*>(
               &_dialogue_seek_rq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(dialogue_seek_rq* other);

  // implements Message ----------------------------------------------

  inline dialogue_seek_rq* New() const PROTOBUF_FINAL { return New(NULL); }

  dialogue_seek_rq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const dialogue_seek_rq& from);
  void MergeFrom(const dialogue_seek_rq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(dialogue_seek_rq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef dialogue_seek_rq_msg msg;
  static const msg id =
    dialogue_seek_rq_msg_id;
  static inline bool msg_IsValid(int value) {
    return dialogue_seek_rq_msg_IsValid(value);
  }
  static const msg msg_MIN =
    dialogue_seek_rq_msg_msg_MIN;
  static const msg msg_MAX =
    dialogue_seek_rq_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    dialogue_seek_rq_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return dialogue_seek_rq_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return dialogue_seek_rq_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return dialogue_seek_rq_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string user_nick = 2 [default = ""];
  bool has_user_nick() const;
  void clear_user_nick();
  static const int kUserNickFieldNumber = 2;
  const ::std::string& user_nick() const;
  void set_user_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_user_nick(::std::string&& value);
  #endif
  void set_user_nick(const char* value);
  void set_user_nick(const char* value, size_t size);
  ::std::string* mutable_user_nick();
  ::std::string* release_user_nick();
  void set_allocated_user_nick(::std::string* user_nick);

  // optional string to_user_nick = 4 [default = ""];
  bool has_to_user_nick() const;
  void clear_to_user_nick();
  static const int kToUserNickFieldNumber = 4;
  const ::std::string& to_user_nick() const;
  void set_to_user_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_to_user_nick(::std::string&& value);
  #endif
  void set_to_user_nick(const char* value);
  void set_to_user_nick(const char* value, size_t size);
  ::std::string* mutable_to_user_nick();
  ::std::string* release_to_user_nick();
  void set_allocated_to_user_nick(::std::string* to_user_nick);

  // optional uint64 user_id = 1 [default = 0];
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // optional uint64 to_user_id = 3 [default = 0];
  bool has_to_user_id() const;
  void clear_to_user_id();
  static const int kToUserIdFieldNumber = 3;
  ::google::protobuf::uint64 to_user_id() const;
  void set_to_user_id(::google::protobuf::uint64 value);

  // optional uint32 socket = 5 [default = 0];
  bool has_socket() const;
  void clear_socket();
  static const int kSocketFieldNumber = 5;
  ::google::protobuf::uint32 socket() const;
  void set_socket(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_dialogue_com.dialogue_seek_rq)
 private:
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_user_nick();
  void clear_has_user_nick();
  void set_has_to_user_id();
  void clear_has_to_user_id();
  void set_has_to_user_nick();
  void clear_has_to_user_nick();
  void set_has_socket();
  void clear_has_socket();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_nick_;
  ::google::protobuf::internal::ArenaStringPtr to_user_nick_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint64 to_user_id_;
  ::google::protobuf::uint32 socket_;
  friend struct protobuf_c_5fdialogue_5fcom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class dialogue_seek_rs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_dialogue_com.dialogue_seek_rs) */ {
 public:
  dialogue_seek_rs();
  virtual ~dialogue_seek_rs();

  dialogue_seek_rs(const dialogue_seek_rs& from);

  inline dialogue_seek_rs& operator=(const dialogue_seek_rs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dialogue_seek_rs& default_instance();

  static inline const dialogue_seek_rs* internal_default_instance() {
    return reinterpret_cast<const dialogue_seek_rs*>(
               &_dialogue_seek_rs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(dialogue_seek_rs* other);

  // implements Message ----------------------------------------------

  inline dialogue_seek_rs* New() const PROTOBUF_FINAL { return New(NULL); }

  dialogue_seek_rs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const dialogue_seek_rs& from);
  void MergeFrom(const dialogue_seek_rs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(dialogue_seek_rs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef dialogue_seek_rs_msg msg;
  static const msg id =
    dialogue_seek_rs_msg_id;
  static inline bool msg_IsValid(int value) {
    return dialogue_seek_rs_msg_IsValid(value);
  }
  static const msg msg_MIN =
    dialogue_seek_rs_msg_msg_MIN;
  static const msg msg_MAX =
    dialogue_seek_rs_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    dialogue_seek_rs_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return dialogue_seek_rs_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return dialogue_seek_rs_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return dialogue_seek_rs_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string user_nick = 3 [default = ""];
  bool has_user_nick() const;
  void clear_user_nick();
  static const int kUserNickFieldNumber = 3;
  const ::std::string& user_nick() const;
  void set_user_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_user_nick(::std::string&& value);
  #endif
  void set_user_nick(const char* value);
  void set_user_nick(const char* value, size_t size);
  ::std::string* mutable_user_nick();
  ::std::string* release_user_nick();
  void set_allocated_user_nick(::std::string* user_nick);

  // optional string to_user_nick = 5 [default = ""];
  bool has_to_user_nick() const;
  void clear_to_user_nick();
  static const int kToUserNickFieldNumber = 5;
  const ::std::string& to_user_nick() const;
  void set_to_user_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_to_user_nick(::std::string&& value);
  #endif
  void set_to_user_nick(const char* value);
  void set_to_user_nick(const char* value, size_t size);
  ::std::string* mutable_to_user_nick();
  ::std::string* release_to_user_nick();
  void set_allocated_to_user_nick(::std::string* to_user_nick);

  // optional bytes seek_desc = 7 [default = ""];
  bool has_seek_desc() const;
  void clear_seek_desc();
  static const int kSeekDescFieldNumber = 7;
  const ::std::string& seek_desc() const;
  void set_seek_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_seek_desc(::std::string&& value);
  #endif
  void set_seek_desc(const char* value);
  void set_seek_desc(const void* value, size_t size);
  ::std::string* mutable_seek_desc();
  ::std::string* release_seek_desc();
  void set_allocated_seek_desc(::std::string* seek_desc);

  // optional .b_error.info error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::b_error::info& error() const;
  ::b_error::info* mutable_error();
  ::b_error::info* release_error();
  void set_allocated_error(::b_error::info* error);

  // optional uint64 user_id = 2 [default = 0];
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // optional uint64 to_user_id = 4 [default = 0];
  bool has_to_user_id() const;
  void clear_to_user_id();
  static const int kToUserIdFieldNumber = 4;
  ::google::protobuf::uint64 to_user_id() const;
  void set_to_user_id(::google::protobuf::uint64 value);

  // optional uint32 seek_state = 6 [default = 0];
  bool has_seek_state() const;
  void clear_seek_state();
  static const int kSeekStateFieldNumber = 6;
  ::google::protobuf::uint32 seek_state() const;
  void set_seek_state(::google::protobuf::uint32 value);

  // optional uint32 socket = 8 [default = 0];
  bool has_socket() const;
  void clear_socket();
  static const int kSocketFieldNumber = 8;
  ::google::protobuf::uint32 socket() const;
  void set_socket(::google::protobuf::uint32 value);

  // optional uint32 to_socket = 9 [default = 0];
  bool has_to_socket() const;
  void clear_to_socket();
  static const int kToSocketFieldNumber = 9;
  ::google::protobuf::uint32 to_socket() const;
  void set_to_socket(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_dialogue_com.dialogue_seek_rs)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_user_nick();
  void clear_has_user_nick();
  void set_has_to_user_id();
  void clear_has_to_user_id();
  void set_has_to_user_nick();
  void clear_has_to_user_nick();
  void set_has_seek_state();
  void clear_has_seek_state();
  void set_has_seek_desc();
  void clear_has_seek_desc();
  void set_has_socket();
  void clear_has_socket();
  void set_has_to_socket();
  void clear_has_to_socket();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_nick_;
  ::google::protobuf::internal::ArenaStringPtr to_user_nick_;
  ::google::protobuf::internal::ArenaStringPtr seek_desc_;
  ::b_error::info* error_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint64 to_user_id_;
  ::google::protobuf::uint32 seek_state_;
  ::google::protobuf::uint32 socket_;
  ::google::protobuf::uint32 to_socket_;
  friend struct protobuf_c_5fdialogue_5fcom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class dialogue_talk_rq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_dialogue_com.dialogue_talk_rq) */ {
 public:
  dialogue_talk_rq();
  virtual ~dialogue_talk_rq();

  dialogue_talk_rq(const dialogue_talk_rq& from);

  inline dialogue_talk_rq& operator=(const dialogue_talk_rq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dialogue_talk_rq& default_instance();

  static inline const dialogue_talk_rq* internal_default_instance() {
    return reinterpret_cast<const dialogue_talk_rq*>(
               &_dialogue_talk_rq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(dialogue_talk_rq* other);

  // implements Message ----------------------------------------------

  inline dialogue_talk_rq* New() const PROTOBUF_FINAL { return New(NULL); }

  dialogue_talk_rq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const dialogue_talk_rq& from);
  void MergeFrom(const dialogue_talk_rq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(dialogue_talk_rq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef dialogue_talk_rq_msg msg;
  static const msg id =
    dialogue_talk_rq_msg_id;
  static inline bool msg_IsValid(int value) {
    return dialogue_talk_rq_msg_IsValid(value);
  }
  static const msg msg_MIN =
    dialogue_talk_rq_msg_msg_MIN;
  static const msg msg_MAX =
    dialogue_talk_rq_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    dialogue_talk_rq_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return dialogue_talk_rq_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return dialogue_talk_rq_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return dialogue_talk_rq_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string user_nick = 2 [default = ""];
  bool has_user_nick() const;
  void clear_user_nick();
  static const int kUserNickFieldNumber = 2;
  const ::std::string& user_nick() const;
  void set_user_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_user_nick(::std::string&& value);
  #endif
  void set_user_nick(const char* value);
  void set_user_nick(const char* value, size_t size);
  ::std::string* mutable_user_nick();
  ::std::string* release_user_nick();
  void set_allocated_user_nick(::std::string* user_nick);

  // optional string to_user_nick = 4 [default = ""];
  bool has_to_user_nick() const;
  void clear_to_user_nick();
  static const int kToUserNickFieldNumber = 4;
  const ::std::string& to_user_nick() const;
  void set_to_user_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_to_user_nick(::std::string&& value);
  #endif
  void set_to_user_nick(const char* value);
  void set_to_user_nick(const char* value, size_t size);
  ::std::string* mutable_to_user_nick();
  ::std::string* release_to_user_nick();
  void set_allocated_to_user_nick(::std::string* to_user_nick);

  // optional bytes talking = 5 [default = ""];
  bool has_talking() const;
  void clear_talking();
  static const int kTalkingFieldNumber = 5;
  const ::std::string& talking() const;
  void set_talking(const ::std::string& value);
  #if LANG_CXX11
  void set_talking(::std::string&& value);
  #endif
  void set_talking(const char* value);
  void set_talking(const void* value, size_t size);
  ::std::string* mutable_talking();
  ::std::string* release_talking();
  void set_allocated_talking(::std::string* talking);

  // optional uint64 user_id = 1 [default = 0];
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // optional uint64 to_user_id = 3 [default = 0];
  bool has_to_user_id() const;
  void clear_to_user_id();
  static const int kToUserIdFieldNumber = 3;
  ::google::protobuf::uint64 to_user_id() const;
  void set_to_user_id(::google::protobuf::uint64 value);

  // optional uint32 socket = 6 [default = 0];
  bool has_socket() const;
  void clear_socket();
  static const int kSocketFieldNumber = 6;
  ::google::protobuf::uint32 socket() const;
  void set_socket(::google::protobuf::uint32 value);

  // optional uint32 to_socket = 7 [default = 0];
  bool has_to_socket() const;
  void clear_to_socket();
  static const int kToSocketFieldNumber = 7;
  ::google::protobuf::uint32 to_socket() const;
  void set_to_socket(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_dialogue_com.dialogue_talk_rq)
 private:
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_user_nick();
  void clear_has_user_nick();
  void set_has_to_user_id();
  void clear_has_to_user_id();
  void set_has_to_user_nick();
  void clear_has_to_user_nick();
  void set_has_talking();
  void clear_has_talking();
  void set_has_socket();
  void clear_has_socket();
  void set_has_to_socket();
  void clear_has_to_socket();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_nick_;
  ::google::protobuf::internal::ArenaStringPtr to_user_nick_;
  ::google::protobuf::internal::ArenaStringPtr talking_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint64 to_user_id_;
  ::google::protobuf::uint32 socket_;
  ::google::protobuf::uint32 to_socket_;
  friend struct protobuf_c_5fdialogue_5fcom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class dialogue_talk_rs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_dialogue_com.dialogue_talk_rs) */ {
 public:
  dialogue_talk_rs();
  virtual ~dialogue_talk_rs();

  dialogue_talk_rs(const dialogue_talk_rs& from);

  inline dialogue_talk_rs& operator=(const dialogue_talk_rs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dialogue_talk_rs& default_instance();

  static inline const dialogue_talk_rs* internal_default_instance() {
    return reinterpret_cast<const dialogue_talk_rs*>(
               &_dialogue_talk_rs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(dialogue_talk_rs* other);

  // implements Message ----------------------------------------------

  inline dialogue_talk_rs* New() const PROTOBUF_FINAL { return New(NULL); }

  dialogue_talk_rs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const dialogue_talk_rs& from);
  void MergeFrom(const dialogue_talk_rs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(dialogue_talk_rs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef dialogue_talk_rs_msg msg;
  static const msg id =
    dialogue_talk_rs_msg_id;
  static inline bool msg_IsValid(int value) {
    return dialogue_talk_rs_msg_IsValid(value);
  }
  static const msg msg_MIN =
    dialogue_talk_rs_msg_msg_MIN;
  static const msg msg_MAX =
    dialogue_talk_rs_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    dialogue_talk_rs_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return dialogue_talk_rs_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return dialogue_talk_rs_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return dialogue_talk_rs_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string user_nick = 3 [default = ""];
  bool has_user_nick() const;
  void clear_user_nick();
  static const int kUserNickFieldNumber = 3;
  const ::std::string& user_nick() const;
  void set_user_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_user_nick(::std::string&& value);
  #endif
  void set_user_nick(const char* value);
  void set_user_nick(const char* value, size_t size);
  ::std::string* mutable_user_nick();
  ::std::string* release_user_nick();
  void set_allocated_user_nick(::std::string* user_nick);

  // optional bytes talk_rs_desc = 5 [default = ""];
  bool has_talk_rs_desc() const;
  void clear_talk_rs_desc();
  static const int kTalkRsDescFieldNumber = 5;
  const ::std::string& talk_rs_desc() const;
  void set_talk_rs_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_talk_rs_desc(::std::string&& value);
  #endif
  void set_talk_rs_desc(const char* value);
  void set_talk_rs_desc(const void* value, size_t size);
  ::std::string* mutable_talk_rs_desc();
  ::std::string* release_talk_rs_desc();
  void set_allocated_talk_rs_desc(::std::string* talk_rs_desc);

  // optional .b_error.info error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::b_error::info& error() const;
  ::b_error::info* mutable_error();
  ::b_error::info* release_error();
  void set_allocated_error(::b_error::info* error);

  // optional uint64 user_id = 2 [default = 0];
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // optional uint32 talk_rs_state = 4 [default = 0];
  bool has_talk_rs_state() const;
  void clear_talk_rs_state();
  static const int kTalkRsStateFieldNumber = 4;
  ::google::protobuf::uint32 talk_rs_state() const;
  void set_talk_rs_state(::google::protobuf::uint32 value);

  // optional uint32 socket = 6 [default = 0];
  bool has_socket() const;
  void clear_socket();
  static const int kSocketFieldNumber = 6;
  ::google::protobuf::uint32 socket() const;
  void set_socket(::google::protobuf::uint32 value);

  // optional uint32 to_socket = 7 [default = 0];
  bool has_to_socket() const;
  void clear_to_socket();
  static const int kToSocketFieldNumber = 7;
  ::google::protobuf::uint32 to_socket() const;
  void set_to_socket(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_dialogue_com.dialogue_talk_rs)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_user_nick();
  void clear_has_user_nick();
  void set_has_talk_rs_state();
  void clear_has_talk_rs_state();
  void set_has_talk_rs_desc();
  void clear_has_talk_rs_desc();
  void set_has_socket();
  void clear_has_socket();
  void set_has_to_socket();
  void clear_has_to_socket();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_nick_;
  ::google::protobuf::internal::ArenaStringPtr talk_rs_desc_;
  ::b_error::info* error_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint32 talk_rs_state_;
  ::google::protobuf::uint32 socket_;
  ::google::protobuf::uint32 to_socket_;
  friend struct protobuf_c_5fdialogue_5fcom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class dialogue_talk_nt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_dialogue_com.dialogue_talk_nt) */ {
 public:
  dialogue_talk_nt();
  virtual ~dialogue_talk_nt();

  dialogue_talk_nt(const dialogue_talk_nt& from);

  inline dialogue_talk_nt& operator=(const dialogue_talk_nt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dialogue_talk_nt& default_instance();

  static inline const dialogue_talk_nt* internal_default_instance() {
    return reinterpret_cast<const dialogue_talk_nt*>(
               &_dialogue_talk_nt_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(dialogue_talk_nt* other);

  // implements Message ----------------------------------------------

  inline dialogue_talk_nt* New() const PROTOBUF_FINAL { return New(NULL); }

  dialogue_talk_nt* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const dialogue_talk_nt& from);
  void MergeFrom(const dialogue_talk_nt& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(dialogue_talk_nt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef dialogue_talk_nt_msg msg;
  static const msg id =
    dialogue_talk_nt_msg_id;
  static inline bool msg_IsValid(int value) {
    return dialogue_talk_nt_msg_IsValid(value);
  }
  static const msg msg_MIN =
    dialogue_talk_nt_msg_msg_MIN;
  static const msg msg_MAX =
    dialogue_talk_nt_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    dialogue_talk_nt_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return dialogue_talk_nt_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return dialogue_talk_nt_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return dialogue_talk_nt_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string user_nick = 3 [default = ""];
  bool has_user_nick() const;
  void clear_user_nick();
  static const int kUserNickFieldNumber = 3;
  const ::std::string& user_nick() const;
  void set_user_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_user_nick(::std::string&& value);
  #endif
  void set_user_nick(const char* value);
  void set_user_nick(const char* value, size_t size);
  ::std::string* mutable_user_nick();
  ::std::string* release_user_nick();
  void set_allocated_user_nick(::std::string* user_nick);

  // optional string to_user_nick = 5 [default = ""];
  bool has_to_user_nick() const;
  void clear_to_user_nick();
  static const int kToUserNickFieldNumber = 5;
  const ::std::string& to_user_nick() const;
  void set_to_user_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_to_user_nick(::std::string&& value);
  #endif
  void set_to_user_nick(const char* value);
  void set_to_user_nick(const char* value, size_t size);
  ::std::string* mutable_to_user_nick();
  ::std::string* release_to_user_nick();
  void set_allocated_to_user_nick(::std::string* to_user_nick);

  // optional bytes talking = 6 [default = ""];
  bool has_talking() const;
  void clear_talking();
  static const int kTalkingFieldNumber = 6;
  const ::std::string& talking() const;
  void set_talking(const ::std::string& value);
  #if LANG_CXX11
  void set_talking(::std::string&& value);
  #endif
  void set_talking(const char* value);
  void set_talking(const void* value, size_t size);
  ::std::string* mutable_talking();
  ::std::string* release_talking();
  void set_allocated_talking(::std::string* talking);

  // optional bytes talk_nt_desc = 8 [default = ""];
  bool has_talk_nt_desc() const;
  void clear_talk_nt_desc();
  static const int kTalkNtDescFieldNumber = 8;
  const ::std::string& talk_nt_desc() const;
  void set_talk_nt_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_talk_nt_desc(::std::string&& value);
  #endif
  void set_talk_nt_desc(const char* value);
  void set_talk_nt_desc(const void* value, size_t size);
  ::std::string* mutable_talk_nt_desc();
  ::std::string* release_talk_nt_desc();
  void set_allocated_talk_nt_desc(::std::string* talk_nt_desc);

  // optional .b_error.info error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::b_error::info& error() const;
  ::b_error::info* mutable_error();
  ::b_error::info* release_error();
  void set_allocated_error(::b_error::info* error);

  // optional uint64 user_id = 2 [default = 0];
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // optional uint64 to_user_id = 4 [default = 0];
  bool has_to_user_id() const;
  void clear_to_user_id();
  static const int kToUserIdFieldNumber = 4;
  ::google::protobuf::uint64 to_user_id() const;
  void set_to_user_id(::google::protobuf::uint64 value);

  // optional uint32 talk_nt_state = 7 [default = 0];
  bool has_talk_nt_state() const;
  void clear_talk_nt_state();
  static const int kTalkNtStateFieldNumber = 7;
  ::google::protobuf::uint32 talk_nt_state() const;
  void set_talk_nt_state(::google::protobuf::uint32 value);

  // optional uint32 socket = 9 [default = 0];
  bool has_socket() const;
  void clear_socket();
  static const int kSocketFieldNumber = 9;
  ::google::protobuf::uint32 socket() const;
  void set_socket(::google::protobuf::uint32 value);

  // optional uint32 to_socket = 10 [default = 0];
  bool has_to_socket() const;
  void clear_to_socket();
  static const int kToSocketFieldNumber = 10;
  ::google::protobuf::uint32 to_socket() const;
  void set_to_socket(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_dialogue_com.dialogue_talk_nt)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_user_nick();
  void clear_has_user_nick();
  void set_has_to_user_id();
  void clear_has_to_user_id();
  void set_has_to_user_nick();
  void clear_has_to_user_nick();
  void set_has_talking();
  void clear_has_talking();
  void set_has_talk_nt_state();
  void clear_has_talk_nt_state();
  void set_has_talk_nt_desc();
  void clear_has_talk_nt_desc();
  void set_has_socket();
  void clear_has_socket();
  void set_has_to_socket();
  void clear_has_to_socket();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_nick_;
  ::google::protobuf::internal::ArenaStringPtr to_user_nick_;
  ::google::protobuf::internal::ArenaStringPtr talking_;
  ::google::protobuf::internal::ArenaStringPtr talk_nt_desc_;
  ::b_error::info* error_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint64 to_user_id_;
  ::google::protobuf::uint32 talk_nt_state_;
  ::google::protobuf::uint32 socket_;
  ::google::protobuf::uint32 to_socket_;
  friend struct protobuf_c_5fdialogue_5fcom_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// dialogue_login_rq

// optional uint64 user_id = 1 [default = 0];
inline bool dialogue_login_rq::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void dialogue_login_rq::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void dialogue_login_rq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void dialogue_login_rq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 dialogue_login_rq::user_id() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_login_rq.user_id)
  return user_id_;
}
inline void dialogue_login_rq::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_login_rq.user_id)
}

// optional string user_nick = 2 [default = ""];
inline bool dialogue_login_rq::has_user_nick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dialogue_login_rq::set_has_user_nick() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dialogue_login_rq::clear_has_user_nick() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dialogue_login_rq::clear_user_nick() {
  user_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_nick();
}
inline const ::std::string& dialogue_login_rq::user_nick() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_login_rq.user_nick)
  return user_nick_.GetNoArena();
}
inline void dialogue_login_rq::set_user_nick(const ::std::string& value) {
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_login_rq.user_nick)
}
#if LANG_CXX11
inline void dialogue_login_rq::set_user_nick(::std::string&& value) {
  set_has_user_nick();
  user_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_com.dialogue_login_rq.user_nick)
}
#endif
inline void dialogue_login_rq::set_user_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_com.dialogue_login_rq.user_nick)
}
inline void dialogue_login_rq::set_user_nick(const char* value, size_t size) {
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_com.dialogue_login_rq.user_nick)
}
inline ::std::string* dialogue_login_rq::mutable_user_nick() {
  set_has_user_nick();
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_login_rq.user_nick)
  return user_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* dialogue_login_rq::release_user_nick() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_login_rq.user_nick)
  clear_has_user_nick();
  return user_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void dialogue_login_rq::set_allocated_user_nick(::std::string* user_nick) {
  if (user_nick != NULL) {
    set_has_user_nick();
  } else {
    clear_has_user_nick();
  }
  user_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_nick);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_login_rq.user_nick)
}

// optional string user_password = 3 [default = ""];
inline bool dialogue_login_rq::has_user_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dialogue_login_rq::set_has_user_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dialogue_login_rq::clear_has_user_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dialogue_login_rq::clear_user_password() {
  user_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_password();
}
inline const ::std::string& dialogue_login_rq::user_password() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_login_rq.user_password)
  return user_password_.GetNoArena();
}
inline void dialogue_login_rq::set_user_password(const ::std::string& value) {
  set_has_user_password();
  user_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_login_rq.user_password)
}
#if LANG_CXX11
inline void dialogue_login_rq::set_user_password(::std::string&& value) {
  set_has_user_password();
  user_password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_com.dialogue_login_rq.user_password)
}
#endif
inline void dialogue_login_rq::set_user_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_password();
  user_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_com.dialogue_login_rq.user_password)
}
inline void dialogue_login_rq::set_user_password(const char* value, size_t size) {
  set_has_user_password();
  user_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_com.dialogue_login_rq.user_password)
}
inline ::std::string* dialogue_login_rq::mutable_user_password() {
  set_has_user_password();
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_login_rq.user_password)
  return user_password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* dialogue_login_rq::release_user_password() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_login_rq.user_password)
  clear_has_user_password();
  return user_password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void dialogue_login_rq::set_allocated_user_password(::std::string* user_password) {
  if (user_password != NULL) {
    set_has_user_password();
  } else {
    clear_has_user_password();
  }
  user_password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_password);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_login_rq.user_password)
}

// -------------------------------------------------------------------

// dialogue_login_rs

// optional .b_error.info error = 1;
inline bool dialogue_login_rs::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void dialogue_login_rs::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void dialogue_login_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void dialogue_login_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
inline const ::b_error::info& dialogue_login_rs::error() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_login_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
inline ::b_error::info* dialogue_login_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_login_rs.error)
  return error_;
}
inline ::b_error::info* dialogue_login_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_login_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
inline void dialogue_login_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_login_rs.error)
}

// optional uint64 user_id = 2 [default = 0];
inline bool dialogue_login_rs::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void dialogue_login_rs::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void dialogue_login_rs::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void dialogue_login_rs::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 dialogue_login_rs::user_id() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_login_rs.user_id)
  return user_id_;
}
inline void dialogue_login_rs::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_login_rs.user_id)
}

// optional string user_nick = 3 [default = ""];
inline bool dialogue_login_rs::has_user_nick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dialogue_login_rs::set_has_user_nick() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dialogue_login_rs::clear_has_user_nick() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dialogue_login_rs::clear_user_nick() {
  user_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_nick();
}
inline const ::std::string& dialogue_login_rs::user_nick() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_login_rs.user_nick)
  return user_nick_.GetNoArena();
}
inline void dialogue_login_rs::set_user_nick(const ::std::string& value) {
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_login_rs.user_nick)
}
#if LANG_CXX11
inline void dialogue_login_rs::set_user_nick(::std::string&& value) {
  set_has_user_nick();
  user_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_com.dialogue_login_rs.user_nick)
}
#endif
inline void dialogue_login_rs::set_user_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_com.dialogue_login_rs.user_nick)
}
inline void dialogue_login_rs::set_user_nick(const char* value, size_t size) {
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_com.dialogue_login_rs.user_nick)
}
inline ::std::string* dialogue_login_rs::mutable_user_nick() {
  set_has_user_nick();
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_login_rs.user_nick)
  return user_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* dialogue_login_rs::release_user_nick() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_login_rs.user_nick)
  clear_has_user_nick();
  return user_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void dialogue_login_rs::set_allocated_user_nick(::std::string* user_nick) {
  if (user_nick != NULL) {
    set_has_user_nick();
  } else {
    clear_has_user_nick();
  }
  user_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_nick);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_login_rs.user_nick)
}

// optional uint32 login_state = 4 [default = 0];
inline bool dialogue_login_rs::has_login_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void dialogue_login_rs::set_has_login_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void dialogue_login_rs::clear_has_login_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void dialogue_login_rs::clear_login_state() {
  login_state_ = 0u;
  clear_has_login_state();
}
inline ::google::protobuf::uint32 dialogue_login_rs::login_state() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_login_rs.login_state)
  return login_state_;
}
inline void dialogue_login_rs::set_login_state(::google::protobuf::uint32 value) {
  set_has_login_state();
  login_state_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_login_rs.login_state)
}

// optional bytes login_desc = 5 [default = ""];
inline bool dialogue_login_rs::has_login_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dialogue_login_rs::set_has_login_desc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dialogue_login_rs::clear_has_login_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dialogue_login_rs::clear_login_desc() {
  login_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_login_desc();
}
inline const ::std::string& dialogue_login_rs::login_desc() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_login_rs.login_desc)
  return login_desc_.GetNoArena();
}
inline void dialogue_login_rs::set_login_desc(const ::std::string& value) {
  set_has_login_desc();
  login_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_login_rs.login_desc)
}
#if LANG_CXX11
inline void dialogue_login_rs::set_login_desc(::std::string&& value) {
  set_has_login_desc();
  login_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_com.dialogue_login_rs.login_desc)
}
#endif
inline void dialogue_login_rs::set_login_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_login_desc();
  login_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_com.dialogue_login_rs.login_desc)
}
inline void dialogue_login_rs::set_login_desc(const void* value, size_t size) {
  set_has_login_desc();
  login_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_com.dialogue_login_rs.login_desc)
}
inline ::std::string* dialogue_login_rs::mutable_login_desc() {
  set_has_login_desc();
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_login_rs.login_desc)
  return login_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* dialogue_login_rs::release_login_desc() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_login_rs.login_desc)
  clear_has_login_desc();
  return login_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void dialogue_login_rs::set_allocated_login_desc(::std::string* login_desc) {
  if (login_desc != NULL) {
    set_has_login_desc();
  } else {
    clear_has_login_desc();
  }
  login_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login_desc);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_login_rs.login_desc)
}

// optional uint32 socket = 6 [default = 0];
inline bool dialogue_login_rs::has_socket() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void dialogue_login_rs::set_has_socket() {
  _has_bits_[0] |= 0x00000020u;
}
inline void dialogue_login_rs::clear_has_socket() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void dialogue_login_rs::clear_socket() {
  socket_ = 0u;
  clear_has_socket();
}
inline ::google::protobuf::uint32 dialogue_login_rs::socket() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_login_rs.socket)
  return socket_;
}
inline void dialogue_login_rs::set_socket(::google::protobuf::uint32 value) {
  set_has_socket();
  socket_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_login_rs.socket)
}

// -------------------------------------------------------------------

// dialogue_seek_rq

// optional uint64 user_id = 1 [default = 0];
inline bool dialogue_seek_rq::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void dialogue_seek_rq::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void dialogue_seek_rq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void dialogue_seek_rq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 dialogue_seek_rq::user_id() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_seek_rq.user_id)
  return user_id_;
}
inline void dialogue_seek_rq::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_seek_rq.user_id)
}

// optional string user_nick = 2 [default = ""];
inline bool dialogue_seek_rq::has_user_nick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dialogue_seek_rq::set_has_user_nick() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dialogue_seek_rq::clear_has_user_nick() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dialogue_seek_rq::clear_user_nick() {
  user_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_nick();
}
inline const ::std::string& dialogue_seek_rq::user_nick() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_seek_rq.user_nick)
  return user_nick_.GetNoArena();
}
inline void dialogue_seek_rq::set_user_nick(const ::std::string& value) {
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_seek_rq.user_nick)
}
#if LANG_CXX11
inline void dialogue_seek_rq::set_user_nick(::std::string&& value) {
  set_has_user_nick();
  user_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_com.dialogue_seek_rq.user_nick)
}
#endif
inline void dialogue_seek_rq::set_user_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_com.dialogue_seek_rq.user_nick)
}
inline void dialogue_seek_rq::set_user_nick(const char* value, size_t size) {
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_com.dialogue_seek_rq.user_nick)
}
inline ::std::string* dialogue_seek_rq::mutable_user_nick() {
  set_has_user_nick();
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_seek_rq.user_nick)
  return user_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* dialogue_seek_rq::release_user_nick() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_seek_rq.user_nick)
  clear_has_user_nick();
  return user_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void dialogue_seek_rq::set_allocated_user_nick(::std::string* user_nick) {
  if (user_nick != NULL) {
    set_has_user_nick();
  } else {
    clear_has_user_nick();
  }
  user_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_nick);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_seek_rq.user_nick)
}

// optional uint64 to_user_id = 3 [default = 0];
inline bool dialogue_seek_rq::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void dialogue_seek_rq::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void dialogue_seek_rq::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void dialogue_seek_rq::clear_to_user_id() {
  to_user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_to_user_id();
}
inline ::google::protobuf::uint64 dialogue_seek_rq::to_user_id() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_seek_rq.to_user_id)
  return to_user_id_;
}
inline void dialogue_seek_rq::set_to_user_id(::google::protobuf::uint64 value) {
  set_has_to_user_id();
  to_user_id_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_seek_rq.to_user_id)
}

// optional string to_user_nick = 4 [default = ""];
inline bool dialogue_seek_rq::has_to_user_nick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dialogue_seek_rq::set_has_to_user_nick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dialogue_seek_rq::clear_has_to_user_nick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dialogue_seek_rq::clear_to_user_nick() {
  to_user_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_user_nick();
}
inline const ::std::string& dialogue_seek_rq::to_user_nick() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_seek_rq.to_user_nick)
  return to_user_nick_.GetNoArena();
}
inline void dialogue_seek_rq::set_to_user_nick(const ::std::string& value) {
  set_has_to_user_nick();
  to_user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_seek_rq.to_user_nick)
}
#if LANG_CXX11
inline void dialogue_seek_rq::set_to_user_nick(::std::string&& value) {
  set_has_to_user_nick();
  to_user_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_com.dialogue_seek_rq.to_user_nick)
}
#endif
inline void dialogue_seek_rq::set_to_user_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_to_user_nick();
  to_user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_com.dialogue_seek_rq.to_user_nick)
}
inline void dialogue_seek_rq::set_to_user_nick(const char* value, size_t size) {
  set_has_to_user_nick();
  to_user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_com.dialogue_seek_rq.to_user_nick)
}
inline ::std::string* dialogue_seek_rq::mutable_to_user_nick() {
  set_has_to_user_nick();
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_seek_rq.to_user_nick)
  return to_user_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* dialogue_seek_rq::release_to_user_nick() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_seek_rq.to_user_nick)
  clear_has_to_user_nick();
  return to_user_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void dialogue_seek_rq::set_allocated_to_user_nick(::std::string* to_user_nick) {
  if (to_user_nick != NULL) {
    set_has_to_user_nick();
  } else {
    clear_has_to_user_nick();
  }
  to_user_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_user_nick);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_seek_rq.to_user_nick)
}

// optional uint32 socket = 5 [default = 0];
inline bool dialogue_seek_rq::has_socket() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void dialogue_seek_rq::set_has_socket() {
  _has_bits_[0] |= 0x00000010u;
}
inline void dialogue_seek_rq::clear_has_socket() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void dialogue_seek_rq::clear_socket() {
  socket_ = 0u;
  clear_has_socket();
}
inline ::google::protobuf::uint32 dialogue_seek_rq::socket() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_seek_rq.socket)
  return socket_;
}
inline void dialogue_seek_rq::set_socket(::google::protobuf::uint32 value) {
  set_has_socket();
  socket_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_seek_rq.socket)
}

// -------------------------------------------------------------------

// dialogue_seek_rs

// optional .b_error.info error = 1;
inline bool dialogue_seek_rs::has_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void dialogue_seek_rs::set_has_error() {
  _has_bits_[0] |= 0x00000008u;
}
inline void dialogue_seek_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void dialogue_seek_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
inline const ::b_error::info& dialogue_seek_rs::error() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_seek_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
inline ::b_error::info* dialogue_seek_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_seek_rs.error)
  return error_;
}
inline ::b_error::info* dialogue_seek_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_seek_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
inline void dialogue_seek_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_seek_rs.error)
}

// optional uint64 user_id = 2 [default = 0];
inline bool dialogue_seek_rs::has_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void dialogue_seek_rs::set_has_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void dialogue_seek_rs::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void dialogue_seek_rs::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 dialogue_seek_rs::user_id() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_seek_rs.user_id)
  return user_id_;
}
inline void dialogue_seek_rs::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_seek_rs.user_id)
}

// optional string user_nick = 3 [default = ""];
inline bool dialogue_seek_rs::has_user_nick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dialogue_seek_rs::set_has_user_nick() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dialogue_seek_rs::clear_has_user_nick() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dialogue_seek_rs::clear_user_nick() {
  user_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_nick();
}
inline const ::std::string& dialogue_seek_rs::user_nick() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_seek_rs.user_nick)
  return user_nick_.GetNoArena();
}
inline void dialogue_seek_rs::set_user_nick(const ::std::string& value) {
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_seek_rs.user_nick)
}
#if LANG_CXX11
inline void dialogue_seek_rs::set_user_nick(::std::string&& value) {
  set_has_user_nick();
  user_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_com.dialogue_seek_rs.user_nick)
}
#endif
inline void dialogue_seek_rs::set_user_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_com.dialogue_seek_rs.user_nick)
}
inline void dialogue_seek_rs::set_user_nick(const char* value, size_t size) {
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_com.dialogue_seek_rs.user_nick)
}
inline ::std::string* dialogue_seek_rs::mutable_user_nick() {
  set_has_user_nick();
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_seek_rs.user_nick)
  return user_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* dialogue_seek_rs::release_user_nick() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_seek_rs.user_nick)
  clear_has_user_nick();
  return user_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void dialogue_seek_rs::set_allocated_user_nick(::std::string* user_nick) {
  if (user_nick != NULL) {
    set_has_user_nick();
  } else {
    clear_has_user_nick();
  }
  user_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_nick);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_seek_rs.user_nick)
}

// optional uint64 to_user_id = 4 [default = 0];
inline bool dialogue_seek_rs::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void dialogue_seek_rs::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void dialogue_seek_rs::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void dialogue_seek_rs::clear_to_user_id() {
  to_user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_to_user_id();
}
inline ::google::protobuf::uint64 dialogue_seek_rs::to_user_id() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_seek_rs.to_user_id)
  return to_user_id_;
}
inline void dialogue_seek_rs::set_to_user_id(::google::protobuf::uint64 value) {
  set_has_to_user_id();
  to_user_id_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_seek_rs.to_user_id)
}

// optional string to_user_nick = 5 [default = ""];
inline bool dialogue_seek_rs::has_to_user_nick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dialogue_seek_rs::set_has_to_user_nick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dialogue_seek_rs::clear_has_to_user_nick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dialogue_seek_rs::clear_to_user_nick() {
  to_user_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_user_nick();
}
inline const ::std::string& dialogue_seek_rs::to_user_nick() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_seek_rs.to_user_nick)
  return to_user_nick_.GetNoArena();
}
inline void dialogue_seek_rs::set_to_user_nick(const ::std::string& value) {
  set_has_to_user_nick();
  to_user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_seek_rs.to_user_nick)
}
#if LANG_CXX11
inline void dialogue_seek_rs::set_to_user_nick(::std::string&& value) {
  set_has_to_user_nick();
  to_user_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_com.dialogue_seek_rs.to_user_nick)
}
#endif
inline void dialogue_seek_rs::set_to_user_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_to_user_nick();
  to_user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_com.dialogue_seek_rs.to_user_nick)
}
inline void dialogue_seek_rs::set_to_user_nick(const char* value, size_t size) {
  set_has_to_user_nick();
  to_user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_com.dialogue_seek_rs.to_user_nick)
}
inline ::std::string* dialogue_seek_rs::mutable_to_user_nick() {
  set_has_to_user_nick();
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_seek_rs.to_user_nick)
  return to_user_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* dialogue_seek_rs::release_to_user_nick() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_seek_rs.to_user_nick)
  clear_has_to_user_nick();
  return to_user_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void dialogue_seek_rs::set_allocated_to_user_nick(::std::string* to_user_nick) {
  if (to_user_nick != NULL) {
    set_has_to_user_nick();
  } else {
    clear_has_to_user_nick();
  }
  to_user_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_user_nick);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_seek_rs.to_user_nick)
}

// optional uint32 seek_state = 6 [default = 0];
inline bool dialogue_seek_rs::has_seek_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void dialogue_seek_rs::set_has_seek_state() {
  _has_bits_[0] |= 0x00000040u;
}
inline void dialogue_seek_rs::clear_has_seek_state() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void dialogue_seek_rs::clear_seek_state() {
  seek_state_ = 0u;
  clear_has_seek_state();
}
inline ::google::protobuf::uint32 dialogue_seek_rs::seek_state() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_seek_rs.seek_state)
  return seek_state_;
}
inline void dialogue_seek_rs::set_seek_state(::google::protobuf::uint32 value) {
  set_has_seek_state();
  seek_state_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_seek_rs.seek_state)
}

// optional bytes seek_desc = 7 [default = ""];
inline bool dialogue_seek_rs::has_seek_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void dialogue_seek_rs::set_has_seek_desc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void dialogue_seek_rs::clear_has_seek_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void dialogue_seek_rs::clear_seek_desc() {
  seek_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_seek_desc();
}
inline const ::std::string& dialogue_seek_rs::seek_desc() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_seek_rs.seek_desc)
  return seek_desc_.GetNoArena();
}
inline void dialogue_seek_rs::set_seek_desc(const ::std::string& value) {
  set_has_seek_desc();
  seek_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_seek_rs.seek_desc)
}
#if LANG_CXX11
inline void dialogue_seek_rs::set_seek_desc(::std::string&& value) {
  set_has_seek_desc();
  seek_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_com.dialogue_seek_rs.seek_desc)
}
#endif
inline void dialogue_seek_rs::set_seek_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_seek_desc();
  seek_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_com.dialogue_seek_rs.seek_desc)
}
inline void dialogue_seek_rs::set_seek_desc(const void* value, size_t size) {
  set_has_seek_desc();
  seek_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_com.dialogue_seek_rs.seek_desc)
}
inline ::std::string* dialogue_seek_rs::mutable_seek_desc() {
  set_has_seek_desc();
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_seek_rs.seek_desc)
  return seek_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* dialogue_seek_rs::release_seek_desc() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_seek_rs.seek_desc)
  clear_has_seek_desc();
  return seek_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void dialogue_seek_rs::set_allocated_seek_desc(::std::string* seek_desc) {
  if (seek_desc != NULL) {
    set_has_seek_desc();
  } else {
    clear_has_seek_desc();
  }
  seek_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), seek_desc);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_seek_rs.seek_desc)
}

// optional uint32 socket = 8 [default = 0];
inline bool dialogue_seek_rs::has_socket() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void dialogue_seek_rs::set_has_socket() {
  _has_bits_[0] |= 0x00000080u;
}
inline void dialogue_seek_rs::clear_has_socket() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void dialogue_seek_rs::clear_socket() {
  socket_ = 0u;
  clear_has_socket();
}
inline ::google::protobuf::uint32 dialogue_seek_rs::socket() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_seek_rs.socket)
  return socket_;
}
inline void dialogue_seek_rs::set_socket(::google::protobuf::uint32 value) {
  set_has_socket();
  socket_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_seek_rs.socket)
}

// optional uint32 to_socket = 9 [default = 0];
inline bool dialogue_seek_rs::has_to_socket() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void dialogue_seek_rs::set_has_to_socket() {
  _has_bits_[0] |= 0x00000100u;
}
inline void dialogue_seek_rs::clear_has_to_socket() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void dialogue_seek_rs::clear_to_socket() {
  to_socket_ = 0u;
  clear_has_to_socket();
}
inline ::google::protobuf::uint32 dialogue_seek_rs::to_socket() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_seek_rs.to_socket)
  return to_socket_;
}
inline void dialogue_seek_rs::set_to_socket(::google::protobuf::uint32 value) {
  set_has_to_socket();
  to_socket_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_seek_rs.to_socket)
}

// -------------------------------------------------------------------

// dialogue_talk_rq

// optional uint64 user_id = 1 [default = 0];
inline bool dialogue_talk_rq::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void dialogue_talk_rq::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void dialogue_talk_rq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void dialogue_talk_rq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 dialogue_talk_rq::user_id() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_rq.user_id)
  return user_id_;
}
inline void dialogue_talk_rq::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_rq.user_id)
}

// optional string user_nick = 2 [default = ""];
inline bool dialogue_talk_rq::has_user_nick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dialogue_talk_rq::set_has_user_nick() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dialogue_talk_rq::clear_has_user_nick() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dialogue_talk_rq::clear_user_nick() {
  user_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_nick();
}
inline const ::std::string& dialogue_talk_rq::user_nick() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_rq.user_nick)
  return user_nick_.GetNoArena();
}
inline void dialogue_talk_rq::set_user_nick(const ::std::string& value) {
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_rq.user_nick)
}
#if LANG_CXX11
inline void dialogue_talk_rq::set_user_nick(::std::string&& value) {
  set_has_user_nick();
  user_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_com.dialogue_talk_rq.user_nick)
}
#endif
inline void dialogue_talk_rq::set_user_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_com.dialogue_talk_rq.user_nick)
}
inline void dialogue_talk_rq::set_user_nick(const char* value, size_t size) {
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_com.dialogue_talk_rq.user_nick)
}
inline ::std::string* dialogue_talk_rq::mutable_user_nick() {
  set_has_user_nick();
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_talk_rq.user_nick)
  return user_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* dialogue_talk_rq::release_user_nick() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_talk_rq.user_nick)
  clear_has_user_nick();
  return user_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void dialogue_talk_rq::set_allocated_user_nick(::std::string* user_nick) {
  if (user_nick != NULL) {
    set_has_user_nick();
  } else {
    clear_has_user_nick();
  }
  user_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_nick);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_talk_rq.user_nick)
}

// optional uint64 to_user_id = 3 [default = 0];
inline bool dialogue_talk_rq::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void dialogue_talk_rq::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void dialogue_talk_rq::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void dialogue_talk_rq::clear_to_user_id() {
  to_user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_to_user_id();
}
inline ::google::protobuf::uint64 dialogue_talk_rq::to_user_id() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_rq.to_user_id)
  return to_user_id_;
}
inline void dialogue_talk_rq::set_to_user_id(::google::protobuf::uint64 value) {
  set_has_to_user_id();
  to_user_id_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_rq.to_user_id)
}

// optional string to_user_nick = 4 [default = ""];
inline bool dialogue_talk_rq::has_to_user_nick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dialogue_talk_rq::set_has_to_user_nick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dialogue_talk_rq::clear_has_to_user_nick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dialogue_talk_rq::clear_to_user_nick() {
  to_user_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_user_nick();
}
inline const ::std::string& dialogue_talk_rq::to_user_nick() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_rq.to_user_nick)
  return to_user_nick_.GetNoArena();
}
inline void dialogue_talk_rq::set_to_user_nick(const ::std::string& value) {
  set_has_to_user_nick();
  to_user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_rq.to_user_nick)
}
#if LANG_CXX11
inline void dialogue_talk_rq::set_to_user_nick(::std::string&& value) {
  set_has_to_user_nick();
  to_user_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_com.dialogue_talk_rq.to_user_nick)
}
#endif
inline void dialogue_talk_rq::set_to_user_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_to_user_nick();
  to_user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_com.dialogue_talk_rq.to_user_nick)
}
inline void dialogue_talk_rq::set_to_user_nick(const char* value, size_t size) {
  set_has_to_user_nick();
  to_user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_com.dialogue_talk_rq.to_user_nick)
}
inline ::std::string* dialogue_talk_rq::mutable_to_user_nick() {
  set_has_to_user_nick();
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_talk_rq.to_user_nick)
  return to_user_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* dialogue_talk_rq::release_to_user_nick() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_talk_rq.to_user_nick)
  clear_has_to_user_nick();
  return to_user_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void dialogue_talk_rq::set_allocated_to_user_nick(::std::string* to_user_nick) {
  if (to_user_nick != NULL) {
    set_has_to_user_nick();
  } else {
    clear_has_to_user_nick();
  }
  to_user_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_user_nick);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_talk_rq.to_user_nick)
}

// optional bytes talking = 5 [default = ""];
inline bool dialogue_talk_rq::has_talking() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void dialogue_talk_rq::set_has_talking() {
  _has_bits_[0] |= 0x00000004u;
}
inline void dialogue_talk_rq::clear_has_talking() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void dialogue_talk_rq::clear_talking() {
  talking_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_talking();
}
inline const ::std::string& dialogue_talk_rq::talking() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_rq.talking)
  return talking_.GetNoArena();
}
inline void dialogue_talk_rq::set_talking(const ::std::string& value) {
  set_has_talking();
  talking_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_rq.talking)
}
#if LANG_CXX11
inline void dialogue_talk_rq::set_talking(::std::string&& value) {
  set_has_talking();
  talking_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_com.dialogue_talk_rq.talking)
}
#endif
inline void dialogue_talk_rq::set_talking(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_talking();
  talking_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_com.dialogue_talk_rq.talking)
}
inline void dialogue_talk_rq::set_talking(const void* value, size_t size) {
  set_has_talking();
  talking_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_com.dialogue_talk_rq.talking)
}
inline ::std::string* dialogue_talk_rq::mutable_talking() {
  set_has_talking();
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_talk_rq.talking)
  return talking_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* dialogue_talk_rq::release_talking() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_talk_rq.talking)
  clear_has_talking();
  return talking_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void dialogue_talk_rq::set_allocated_talking(::std::string* talking) {
  if (talking != NULL) {
    set_has_talking();
  } else {
    clear_has_talking();
  }
  talking_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), talking);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_talk_rq.talking)
}

// optional uint32 socket = 6 [default = 0];
inline bool dialogue_talk_rq::has_socket() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void dialogue_talk_rq::set_has_socket() {
  _has_bits_[0] |= 0x00000020u;
}
inline void dialogue_talk_rq::clear_has_socket() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void dialogue_talk_rq::clear_socket() {
  socket_ = 0u;
  clear_has_socket();
}
inline ::google::protobuf::uint32 dialogue_talk_rq::socket() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_rq.socket)
  return socket_;
}
inline void dialogue_talk_rq::set_socket(::google::protobuf::uint32 value) {
  set_has_socket();
  socket_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_rq.socket)
}

// optional uint32 to_socket = 7 [default = 0];
inline bool dialogue_talk_rq::has_to_socket() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void dialogue_talk_rq::set_has_to_socket() {
  _has_bits_[0] |= 0x00000040u;
}
inline void dialogue_talk_rq::clear_has_to_socket() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void dialogue_talk_rq::clear_to_socket() {
  to_socket_ = 0u;
  clear_has_to_socket();
}
inline ::google::protobuf::uint32 dialogue_talk_rq::to_socket() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_rq.to_socket)
  return to_socket_;
}
inline void dialogue_talk_rq::set_to_socket(::google::protobuf::uint32 value) {
  set_has_to_socket();
  to_socket_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_rq.to_socket)
}

// -------------------------------------------------------------------

// dialogue_talk_rs

// optional .b_error.info error = 1;
inline bool dialogue_talk_rs::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void dialogue_talk_rs::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void dialogue_talk_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void dialogue_talk_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
inline const ::b_error::info& dialogue_talk_rs::error() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
inline ::b_error::info* dialogue_talk_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_talk_rs.error)
  return error_;
}
inline ::b_error::info* dialogue_talk_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_talk_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
inline void dialogue_talk_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_talk_rs.error)
}

// optional uint64 user_id = 2 [default = 0];
inline bool dialogue_talk_rs::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void dialogue_talk_rs::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void dialogue_talk_rs::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void dialogue_talk_rs::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 dialogue_talk_rs::user_id() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_rs.user_id)
  return user_id_;
}
inline void dialogue_talk_rs::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_rs.user_id)
}

// optional string user_nick = 3 [default = ""];
inline bool dialogue_talk_rs::has_user_nick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dialogue_talk_rs::set_has_user_nick() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dialogue_talk_rs::clear_has_user_nick() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dialogue_talk_rs::clear_user_nick() {
  user_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_nick();
}
inline const ::std::string& dialogue_talk_rs::user_nick() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_rs.user_nick)
  return user_nick_.GetNoArena();
}
inline void dialogue_talk_rs::set_user_nick(const ::std::string& value) {
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_rs.user_nick)
}
#if LANG_CXX11
inline void dialogue_talk_rs::set_user_nick(::std::string&& value) {
  set_has_user_nick();
  user_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_com.dialogue_talk_rs.user_nick)
}
#endif
inline void dialogue_talk_rs::set_user_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_com.dialogue_talk_rs.user_nick)
}
inline void dialogue_talk_rs::set_user_nick(const char* value, size_t size) {
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_com.dialogue_talk_rs.user_nick)
}
inline ::std::string* dialogue_talk_rs::mutable_user_nick() {
  set_has_user_nick();
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_talk_rs.user_nick)
  return user_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* dialogue_talk_rs::release_user_nick() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_talk_rs.user_nick)
  clear_has_user_nick();
  return user_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void dialogue_talk_rs::set_allocated_user_nick(::std::string* user_nick) {
  if (user_nick != NULL) {
    set_has_user_nick();
  } else {
    clear_has_user_nick();
  }
  user_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_nick);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_talk_rs.user_nick)
}

// optional uint32 talk_rs_state = 4 [default = 0];
inline bool dialogue_talk_rs::has_talk_rs_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void dialogue_talk_rs::set_has_talk_rs_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void dialogue_talk_rs::clear_has_talk_rs_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void dialogue_talk_rs::clear_talk_rs_state() {
  talk_rs_state_ = 0u;
  clear_has_talk_rs_state();
}
inline ::google::protobuf::uint32 dialogue_talk_rs::talk_rs_state() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_rs.talk_rs_state)
  return talk_rs_state_;
}
inline void dialogue_talk_rs::set_talk_rs_state(::google::protobuf::uint32 value) {
  set_has_talk_rs_state();
  talk_rs_state_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_rs.talk_rs_state)
}

// optional bytes talk_rs_desc = 5 [default = ""];
inline bool dialogue_talk_rs::has_talk_rs_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dialogue_talk_rs::set_has_talk_rs_desc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dialogue_talk_rs::clear_has_talk_rs_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dialogue_talk_rs::clear_talk_rs_desc() {
  talk_rs_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_talk_rs_desc();
}
inline const ::std::string& dialogue_talk_rs::talk_rs_desc() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_rs.talk_rs_desc)
  return talk_rs_desc_.GetNoArena();
}
inline void dialogue_talk_rs::set_talk_rs_desc(const ::std::string& value) {
  set_has_talk_rs_desc();
  talk_rs_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_rs.talk_rs_desc)
}
#if LANG_CXX11
inline void dialogue_talk_rs::set_talk_rs_desc(::std::string&& value) {
  set_has_talk_rs_desc();
  talk_rs_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_com.dialogue_talk_rs.talk_rs_desc)
}
#endif
inline void dialogue_talk_rs::set_talk_rs_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_talk_rs_desc();
  talk_rs_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_com.dialogue_talk_rs.talk_rs_desc)
}
inline void dialogue_talk_rs::set_talk_rs_desc(const void* value, size_t size) {
  set_has_talk_rs_desc();
  talk_rs_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_com.dialogue_talk_rs.talk_rs_desc)
}
inline ::std::string* dialogue_talk_rs::mutable_talk_rs_desc() {
  set_has_talk_rs_desc();
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_talk_rs.talk_rs_desc)
  return talk_rs_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* dialogue_talk_rs::release_talk_rs_desc() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_talk_rs.talk_rs_desc)
  clear_has_talk_rs_desc();
  return talk_rs_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void dialogue_talk_rs::set_allocated_talk_rs_desc(::std::string* talk_rs_desc) {
  if (talk_rs_desc != NULL) {
    set_has_talk_rs_desc();
  } else {
    clear_has_talk_rs_desc();
  }
  talk_rs_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), talk_rs_desc);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_talk_rs.talk_rs_desc)
}

// optional uint32 socket = 6 [default = 0];
inline bool dialogue_talk_rs::has_socket() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void dialogue_talk_rs::set_has_socket() {
  _has_bits_[0] |= 0x00000020u;
}
inline void dialogue_talk_rs::clear_has_socket() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void dialogue_talk_rs::clear_socket() {
  socket_ = 0u;
  clear_has_socket();
}
inline ::google::protobuf::uint32 dialogue_talk_rs::socket() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_rs.socket)
  return socket_;
}
inline void dialogue_talk_rs::set_socket(::google::protobuf::uint32 value) {
  set_has_socket();
  socket_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_rs.socket)
}

// optional uint32 to_socket = 7 [default = 0];
inline bool dialogue_talk_rs::has_to_socket() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void dialogue_talk_rs::set_has_to_socket() {
  _has_bits_[0] |= 0x00000040u;
}
inline void dialogue_talk_rs::clear_has_to_socket() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void dialogue_talk_rs::clear_to_socket() {
  to_socket_ = 0u;
  clear_has_to_socket();
}
inline ::google::protobuf::uint32 dialogue_talk_rs::to_socket() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_rs.to_socket)
  return to_socket_;
}
inline void dialogue_talk_rs::set_to_socket(::google::protobuf::uint32 value) {
  set_has_to_socket();
  to_socket_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_rs.to_socket)
}

// -------------------------------------------------------------------

// dialogue_talk_nt

// optional .b_error.info error = 1;
inline bool dialogue_talk_nt::has_error() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void dialogue_talk_nt::set_has_error() {
  _has_bits_[0] |= 0x00000010u;
}
inline void dialogue_talk_nt::clear_has_error() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void dialogue_talk_nt::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
inline const ::b_error::info& dialogue_talk_nt::error() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_nt.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
inline ::b_error::info* dialogue_talk_nt::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_talk_nt.error)
  return error_;
}
inline ::b_error::info* dialogue_talk_nt::release_error() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_talk_nt.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
inline void dialogue_talk_nt::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_talk_nt.error)
}

// optional uint64 user_id = 2 [default = 0];
inline bool dialogue_talk_nt::has_user_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void dialogue_talk_nt::set_has_user_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void dialogue_talk_nt::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void dialogue_talk_nt::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 dialogue_talk_nt::user_id() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_nt.user_id)
  return user_id_;
}
inline void dialogue_talk_nt::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_nt.user_id)
}

// optional string user_nick = 3 [default = ""];
inline bool dialogue_talk_nt::has_user_nick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dialogue_talk_nt::set_has_user_nick() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dialogue_talk_nt::clear_has_user_nick() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dialogue_talk_nt::clear_user_nick() {
  user_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_nick();
}
inline const ::std::string& dialogue_talk_nt::user_nick() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_nt.user_nick)
  return user_nick_.GetNoArena();
}
inline void dialogue_talk_nt::set_user_nick(const ::std::string& value) {
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_nt.user_nick)
}
#if LANG_CXX11
inline void dialogue_talk_nt::set_user_nick(::std::string&& value) {
  set_has_user_nick();
  user_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_com.dialogue_talk_nt.user_nick)
}
#endif
inline void dialogue_talk_nt::set_user_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_com.dialogue_talk_nt.user_nick)
}
inline void dialogue_talk_nt::set_user_nick(const char* value, size_t size) {
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_com.dialogue_talk_nt.user_nick)
}
inline ::std::string* dialogue_talk_nt::mutable_user_nick() {
  set_has_user_nick();
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_talk_nt.user_nick)
  return user_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* dialogue_talk_nt::release_user_nick() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_talk_nt.user_nick)
  clear_has_user_nick();
  return user_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void dialogue_talk_nt::set_allocated_user_nick(::std::string* user_nick) {
  if (user_nick != NULL) {
    set_has_user_nick();
  } else {
    clear_has_user_nick();
  }
  user_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_nick);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_talk_nt.user_nick)
}

// optional uint64 to_user_id = 4 [default = 0];
inline bool dialogue_talk_nt::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void dialogue_talk_nt::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void dialogue_talk_nt::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void dialogue_talk_nt::clear_to_user_id() {
  to_user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_to_user_id();
}
inline ::google::protobuf::uint64 dialogue_talk_nt::to_user_id() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_nt.to_user_id)
  return to_user_id_;
}
inline void dialogue_talk_nt::set_to_user_id(::google::protobuf::uint64 value) {
  set_has_to_user_id();
  to_user_id_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_nt.to_user_id)
}

// optional string to_user_nick = 5 [default = ""];
inline bool dialogue_talk_nt::has_to_user_nick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dialogue_talk_nt::set_has_to_user_nick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dialogue_talk_nt::clear_has_to_user_nick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dialogue_talk_nt::clear_to_user_nick() {
  to_user_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_user_nick();
}
inline const ::std::string& dialogue_talk_nt::to_user_nick() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_nt.to_user_nick)
  return to_user_nick_.GetNoArena();
}
inline void dialogue_talk_nt::set_to_user_nick(const ::std::string& value) {
  set_has_to_user_nick();
  to_user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_nt.to_user_nick)
}
#if LANG_CXX11
inline void dialogue_talk_nt::set_to_user_nick(::std::string&& value) {
  set_has_to_user_nick();
  to_user_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_com.dialogue_talk_nt.to_user_nick)
}
#endif
inline void dialogue_talk_nt::set_to_user_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_to_user_nick();
  to_user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_com.dialogue_talk_nt.to_user_nick)
}
inline void dialogue_talk_nt::set_to_user_nick(const char* value, size_t size) {
  set_has_to_user_nick();
  to_user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_com.dialogue_talk_nt.to_user_nick)
}
inline ::std::string* dialogue_talk_nt::mutable_to_user_nick() {
  set_has_to_user_nick();
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_talk_nt.to_user_nick)
  return to_user_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* dialogue_talk_nt::release_to_user_nick() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_talk_nt.to_user_nick)
  clear_has_to_user_nick();
  return to_user_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void dialogue_talk_nt::set_allocated_to_user_nick(::std::string* to_user_nick) {
  if (to_user_nick != NULL) {
    set_has_to_user_nick();
  } else {
    clear_has_to_user_nick();
  }
  to_user_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_user_nick);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_talk_nt.to_user_nick)
}

// optional bytes talking = 6 [default = ""];
inline bool dialogue_talk_nt::has_talking() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void dialogue_talk_nt::set_has_talking() {
  _has_bits_[0] |= 0x00000004u;
}
inline void dialogue_talk_nt::clear_has_talking() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void dialogue_talk_nt::clear_talking() {
  talking_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_talking();
}
inline const ::std::string& dialogue_talk_nt::talking() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_nt.talking)
  return talking_.GetNoArena();
}
inline void dialogue_talk_nt::set_talking(const ::std::string& value) {
  set_has_talking();
  talking_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_nt.talking)
}
#if LANG_CXX11
inline void dialogue_talk_nt::set_talking(::std::string&& value) {
  set_has_talking();
  talking_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_com.dialogue_talk_nt.talking)
}
#endif
inline void dialogue_talk_nt::set_talking(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_talking();
  talking_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_com.dialogue_talk_nt.talking)
}
inline void dialogue_talk_nt::set_talking(const void* value, size_t size) {
  set_has_talking();
  talking_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_com.dialogue_talk_nt.talking)
}
inline ::std::string* dialogue_talk_nt::mutable_talking() {
  set_has_talking();
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_talk_nt.talking)
  return talking_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* dialogue_talk_nt::release_talking() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_talk_nt.talking)
  clear_has_talking();
  return talking_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void dialogue_talk_nt::set_allocated_talking(::std::string* talking) {
  if (talking != NULL) {
    set_has_talking();
  } else {
    clear_has_talking();
  }
  talking_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), talking);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_talk_nt.talking)
}

// optional uint32 talk_nt_state = 7 [default = 0];
inline bool dialogue_talk_nt::has_talk_nt_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void dialogue_talk_nt::set_has_talk_nt_state() {
  _has_bits_[0] |= 0x00000080u;
}
inline void dialogue_talk_nt::clear_has_talk_nt_state() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void dialogue_talk_nt::clear_talk_nt_state() {
  talk_nt_state_ = 0u;
  clear_has_talk_nt_state();
}
inline ::google::protobuf::uint32 dialogue_talk_nt::talk_nt_state() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_nt.talk_nt_state)
  return talk_nt_state_;
}
inline void dialogue_talk_nt::set_talk_nt_state(::google::protobuf::uint32 value) {
  set_has_talk_nt_state();
  talk_nt_state_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_nt.talk_nt_state)
}

// optional bytes talk_nt_desc = 8 [default = ""];
inline bool dialogue_talk_nt::has_talk_nt_desc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void dialogue_talk_nt::set_has_talk_nt_desc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void dialogue_talk_nt::clear_has_talk_nt_desc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void dialogue_talk_nt::clear_talk_nt_desc() {
  talk_nt_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_talk_nt_desc();
}
inline const ::std::string& dialogue_talk_nt::talk_nt_desc() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_nt.talk_nt_desc)
  return talk_nt_desc_.GetNoArena();
}
inline void dialogue_talk_nt::set_talk_nt_desc(const ::std::string& value) {
  set_has_talk_nt_desc();
  talk_nt_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_nt.talk_nt_desc)
}
#if LANG_CXX11
inline void dialogue_talk_nt::set_talk_nt_desc(::std::string&& value) {
  set_has_talk_nt_desc();
  talk_nt_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_com.dialogue_talk_nt.talk_nt_desc)
}
#endif
inline void dialogue_talk_nt::set_talk_nt_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_talk_nt_desc();
  talk_nt_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_com.dialogue_talk_nt.talk_nt_desc)
}
inline void dialogue_talk_nt::set_talk_nt_desc(const void* value, size_t size) {
  set_has_talk_nt_desc();
  talk_nt_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_com.dialogue_talk_nt.talk_nt_desc)
}
inline ::std::string* dialogue_talk_nt::mutable_talk_nt_desc() {
  set_has_talk_nt_desc();
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_talk_nt.talk_nt_desc)
  return talk_nt_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* dialogue_talk_nt::release_talk_nt_desc() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_talk_nt.talk_nt_desc)
  clear_has_talk_nt_desc();
  return talk_nt_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void dialogue_talk_nt::set_allocated_talk_nt_desc(::std::string* talk_nt_desc) {
  if (talk_nt_desc != NULL) {
    set_has_talk_nt_desc();
  } else {
    clear_has_talk_nt_desc();
  }
  talk_nt_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), talk_nt_desc);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_talk_nt.talk_nt_desc)
}

// optional uint32 socket = 9 [default = 0];
inline bool dialogue_talk_nt::has_socket() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void dialogue_talk_nt::set_has_socket() {
  _has_bits_[0] |= 0x00000100u;
}
inline void dialogue_talk_nt::clear_has_socket() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void dialogue_talk_nt::clear_socket() {
  socket_ = 0u;
  clear_has_socket();
}
inline ::google::protobuf::uint32 dialogue_talk_nt::socket() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_nt.socket)
  return socket_;
}
inline void dialogue_talk_nt::set_socket(::google::protobuf::uint32 value) {
  set_has_socket();
  socket_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_nt.socket)
}

// optional uint32 to_socket = 10 [default = 0];
inline bool dialogue_talk_nt::has_to_socket() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void dialogue_talk_nt::set_has_to_socket() {
  _has_bits_[0] |= 0x00000200u;
}
inline void dialogue_talk_nt::clear_has_to_socket() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void dialogue_talk_nt::clear_to_socket() {
  to_socket_ = 0u;
  clear_has_to_socket();
}
inline ::google::protobuf::uint32 dialogue_talk_nt::to_socket() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_nt.to_socket)
  return to_socket_;
}
inline void dialogue_talk_nt::set_to_socket(::google::protobuf::uint32 value) {
  set_has_to_socket();
  to_socket_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_nt.to_socket)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace c_dialogue_com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::c_dialogue_com::dialogue_login_rq_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_dialogue_com::dialogue_login_rq_msg>() {
  return ::c_dialogue_com::dialogue_login_rq_msg_descriptor();
}
template <> struct is_proto_enum< ::c_dialogue_com::dialogue_login_rs_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_dialogue_com::dialogue_login_rs_msg>() {
  return ::c_dialogue_com::dialogue_login_rs_msg_descriptor();
}
template <> struct is_proto_enum< ::c_dialogue_com::dialogue_seek_rq_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_dialogue_com::dialogue_seek_rq_msg>() {
  return ::c_dialogue_com::dialogue_seek_rq_msg_descriptor();
}
template <> struct is_proto_enum< ::c_dialogue_com::dialogue_seek_rs_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_dialogue_com::dialogue_seek_rs_msg>() {
  return ::c_dialogue_com::dialogue_seek_rs_msg_descriptor();
}
template <> struct is_proto_enum< ::c_dialogue_com::dialogue_talk_rq_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_dialogue_com::dialogue_talk_rq_msg>() {
  return ::c_dialogue_com::dialogue_talk_rq_msg_descriptor();
}
template <> struct is_proto_enum< ::c_dialogue_com::dialogue_talk_rs_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_dialogue_com::dialogue_talk_rs_msg>() {
  return ::c_dialogue_com::dialogue_talk_rs_msg_descriptor();
}
template <> struct is_proto_enum< ::c_dialogue_com::dialogue_talk_nt_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_dialogue_com::dialogue_talk_nt_msg>() {
  return ::c_dialogue_com::dialogue_talk_nt_msg_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_c_5fdialogue_5fcom_2eproto__INCLUDED
