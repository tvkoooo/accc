// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: c_dialogue_baseinfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "c_dialogue_baseinfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace c_dialogue_baseinfo {
class dialogue_baseinfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<dialogue_baseinfo> {
} _dialogue_baseinfo_default_instance_;

namespace protobuf_c_5fdialogue_5fbaseinfo_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _dialogue_baseinfo_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _dialogue_baseinfo_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_c_5fdialogue_5fbaseinfo_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int dialogue_baseinfo::kEnumMsgFieldNumber;
const int dialogue_baseinfo::kErrorStateFieldNumber;
const int dialogue_baseinfo::kErrorDescFieldNumber;
const int dialogue_baseinfo::kUserIdFieldNumber;
const int dialogue_baseinfo::kUserNickFieldNumber;
const int dialogue_baseinfo::kUserPasswordFieldNumber;
const int dialogue_baseinfo::kToUserIdFieldNumber;
const int dialogue_baseinfo::kToUserNickFieldNumber;
const int dialogue_baseinfo::kTalkingFieldNumber;
const int dialogue_baseinfo::kSystemStateFieldNumber;
const int dialogue_baseinfo::kSystemDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

dialogue_baseinfo::dialogue_baseinfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fdialogue_5fbaseinfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_dialogue_baseinfo.dialogue_baseinfo)
}
dialogue_baseinfo::dialogue_baseinfo(const dialogue_baseinfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_desc()) {
    error_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_desc_);
  }
  user_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_nick()) {
    user_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_nick_);
  }
  user_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_password()) {
    user_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_password_);
  }
  to_user_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_to_user_nick()) {
    to_user_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_user_nick_);
  }
  talking_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_talking()) {
    talking_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.talking_);
  }
  system_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_system_desc()) {
    system_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_desc_);
  }
  ::memcpy(&enum_msg_, &from.enum_msg_,
    reinterpret_cast<char*>(&system_state_) -
    reinterpret_cast<char*>(&enum_msg_) + sizeof(system_state_));
  // @@protoc_insertion_point(copy_constructor:c_dialogue_baseinfo.dialogue_baseinfo)
}

void dialogue_baseinfo::SharedCtor() {
  _cached_size_ = 0;
  error_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_user_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  talking_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&enum_msg_, 0, reinterpret_cast<char*>(&system_state_) -
    reinterpret_cast<char*>(&enum_msg_) + sizeof(system_state_));
}

dialogue_baseinfo::~dialogue_baseinfo() {
  // @@protoc_insertion_point(destructor:c_dialogue_baseinfo.dialogue_baseinfo)
  SharedDtor();
}

void dialogue_baseinfo::SharedDtor() {
  error_desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_user_nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  talking_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void dialogue_baseinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const dialogue_baseinfo& dialogue_baseinfo::default_instance() {
  protobuf_c_5fdialogue_5fbaseinfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

dialogue_baseinfo* dialogue_baseinfo::New(::google::protobuf::Arena* arena) const {
  dialogue_baseinfo* n = new dialogue_baseinfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void dialogue_baseinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:c_dialogue_baseinfo.dialogue_baseinfo)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_error_desc()) {
      GOOGLE_DCHECK(!error_desc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*error_desc_.UnsafeRawStringPointer())->clear();
    }
    if (has_user_nick()) {
      GOOGLE_DCHECK(!user_nick_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_nick_.UnsafeRawStringPointer())->clear();
    }
    if (has_user_password()) {
      GOOGLE_DCHECK(!user_password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_password_.UnsafeRawStringPointer())->clear();
    }
    if (has_to_user_nick()) {
      GOOGLE_DCHECK(!to_user_nick_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*to_user_nick_.UnsafeRawStringPointer())->clear();
    }
    if (has_talking()) {
      GOOGLE_DCHECK(!talking_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*talking_.UnsafeRawStringPointer())->clear();
    }
    if (has_system_desc()) {
      GOOGLE_DCHECK(!system_desc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*system_desc_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&enum_msg_, 0, reinterpret_cast<char*>(&error_state_) -
      reinterpret_cast<char*>(&enum_msg_) + sizeof(error_state_));
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&user_id_, 0, reinterpret_cast<char*>(&system_state_) -
      reinterpret_cast<char*>(&user_id_) + sizeof(system_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool dialogue_baseinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:c_dialogue_baseinfo.dialogue_baseinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 enum_msg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_enum_msg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enum_msg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 error_state = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_error_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_desc = 3 [default = ""];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 user_id = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_nick = 5 [default = ""];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_nick()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_password = 6 [default = ""];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_password()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 to_user_id = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_to_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string to_user_nick = 8 [default = ""];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_user_nick()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string talking = 9 [default = ""];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_talking()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 system_state = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_system_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &system_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string system_desc = 11 [default = ""];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_system_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_dialogue_baseinfo.dialogue_baseinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_dialogue_baseinfo.dialogue_baseinfo)
  return false;
#undef DO_
}

void dialogue_baseinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_dialogue_baseinfo.dialogue_baseinfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 enum_msg = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->enum_msg(), output);
  }

  // optional uint32 error_state = 2 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->error_state(), output);
  }

  // optional string error_desc = 3 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error_desc(), output);
  }

  // optional uint64 user_id = 4 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->user_id(), output);
  }

  // optional string user_nick = 5 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->user_nick(), output);
  }

  // optional string user_password = 6 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->user_password(), output);
  }

  // optional uint64 to_user_id = 7 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->to_user_id(), output);
  }

  // optional string to_user_nick = 8 [default = ""];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->to_user_nick(), output);
  }

  // optional string talking = 9 [default = ""];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->talking(), output);
  }

  // optional uint32 system_state = 10 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->system_state(), output);
  }

  // optional string system_desc = 11 [default = ""];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->system_desc(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:c_dialogue_baseinfo.dialogue_baseinfo)
}

size_t dialogue_baseinfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_dialogue_baseinfo.dialogue_baseinfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional string error_desc = 3 [default = ""];
    if (has_error_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_desc());
    }

    // optional string user_nick = 5 [default = ""];
    if (has_user_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_nick());
    }

    // optional string user_password = 6 [default = ""];
    if (has_user_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_password());
    }

    // optional string to_user_nick = 8 [default = ""];
    if (has_to_user_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_user_nick());
    }

    // optional string talking = 9 [default = ""];
    if (has_talking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->talking());
    }

    // optional string system_desc = 11 [default = ""];
    if (has_system_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->system_desc());
    }

    // optional uint32 enum_msg = 1;
    if (has_enum_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enum_msg());
    }

    // optional uint32 error_state = 2 [default = 0];
    if (has_error_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_state());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional uint64 user_id = 4 [default = 0];
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 to_user_id = 7 [default = 0];
    if (has_to_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_user_id());
    }

    // optional uint32 system_state = 10 [default = 0];
    if (has_system_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->system_state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dialogue_baseinfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const dialogue_baseinfo*>(&from));
}

void dialogue_baseinfo::MergeFrom(const dialogue_baseinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_dialogue_baseinfo.dialogue_baseinfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_desc();
      error_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_desc_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_user_nick();
      user_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_nick_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_user_password();
      user_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_password_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_to_user_nick();
      to_user_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_user_nick_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_talking();
      talking_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.talking_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_system_desc();
      system_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_desc_);
    }
    if (cached_has_bits & 0x00000040u) {
      enum_msg_ = from.enum_msg_;
    }
    if (cached_has_bits & 0x00000080u) {
      error_state_ = from.error_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      to_user_id_ = from.to_user_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      system_state_ = from.system_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void dialogue_baseinfo::CopyFrom(const dialogue_baseinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_dialogue_baseinfo.dialogue_baseinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dialogue_baseinfo::IsInitialized() const {
  return true;
}

void dialogue_baseinfo::Swap(dialogue_baseinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void dialogue_baseinfo::InternalSwap(dialogue_baseinfo* other) {
  error_desc_.Swap(&other->error_desc_);
  user_nick_.Swap(&other->user_nick_);
  user_password_.Swap(&other->user_password_);
  to_user_nick_.Swap(&other->to_user_nick_);
  talking_.Swap(&other->talking_);
  system_desc_.Swap(&other->system_desc_);
  std::swap(enum_msg_, other->enum_msg_);
  std::swap(error_state_, other->error_state_);
  std::swap(user_id_, other->user_id_);
  std::swap(to_user_id_, other->to_user_id_);
  std::swap(system_state_, other->system_state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string dialogue_baseinfo::GetTypeName() const {
  return "c_dialogue_baseinfo.dialogue_baseinfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// dialogue_baseinfo

// optional uint32 enum_msg = 1;
bool dialogue_baseinfo::has_enum_msg() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void dialogue_baseinfo::set_has_enum_msg() {
  _has_bits_[0] |= 0x00000040u;
}
void dialogue_baseinfo::clear_has_enum_msg() {
  _has_bits_[0] &= ~0x00000040u;
}
void dialogue_baseinfo::clear_enum_msg() {
  enum_msg_ = 0u;
  clear_has_enum_msg();
}
::google::protobuf::uint32 dialogue_baseinfo::enum_msg() const {
  // @@protoc_insertion_point(field_get:c_dialogue_baseinfo.dialogue_baseinfo.enum_msg)
  return enum_msg_;
}
void dialogue_baseinfo::set_enum_msg(::google::protobuf::uint32 value) {
  set_has_enum_msg();
  enum_msg_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_baseinfo.dialogue_baseinfo.enum_msg)
}

// optional uint32 error_state = 2 [default = 0];
bool dialogue_baseinfo::has_error_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void dialogue_baseinfo::set_has_error_state() {
  _has_bits_[0] |= 0x00000080u;
}
void dialogue_baseinfo::clear_has_error_state() {
  _has_bits_[0] &= ~0x00000080u;
}
void dialogue_baseinfo::clear_error_state() {
  error_state_ = 0u;
  clear_has_error_state();
}
::google::protobuf::uint32 dialogue_baseinfo::error_state() const {
  // @@protoc_insertion_point(field_get:c_dialogue_baseinfo.dialogue_baseinfo.error_state)
  return error_state_;
}
void dialogue_baseinfo::set_error_state(::google::protobuf::uint32 value) {
  set_has_error_state();
  error_state_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_baseinfo.dialogue_baseinfo.error_state)
}

// optional string error_desc = 3 [default = ""];
bool dialogue_baseinfo::has_error_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void dialogue_baseinfo::set_has_error_desc() {
  _has_bits_[0] |= 0x00000001u;
}
void dialogue_baseinfo::clear_has_error_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
void dialogue_baseinfo::clear_error_desc() {
  error_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_desc();
}
const ::std::string& dialogue_baseinfo::error_desc() const {
  // @@protoc_insertion_point(field_get:c_dialogue_baseinfo.dialogue_baseinfo.error_desc)
  return error_desc_.GetNoArena();
}
void dialogue_baseinfo::set_error_desc(const ::std::string& value) {
  set_has_error_desc();
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_baseinfo.dialogue_baseinfo.error_desc)
}
#if LANG_CXX11
void dialogue_baseinfo::set_error_desc(::std::string&& value) {
  set_has_error_desc();
  error_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_baseinfo.dialogue_baseinfo.error_desc)
}
#endif
void dialogue_baseinfo::set_error_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_desc();
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_baseinfo.dialogue_baseinfo.error_desc)
}
void dialogue_baseinfo::set_error_desc(const char* value, size_t size) {
  set_has_error_desc();
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_baseinfo.dialogue_baseinfo.error_desc)
}
::std::string* dialogue_baseinfo::mutable_error_desc() {
  set_has_error_desc();
  // @@protoc_insertion_point(field_mutable:c_dialogue_baseinfo.dialogue_baseinfo.error_desc)
  return error_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dialogue_baseinfo::release_error_desc() {
  // @@protoc_insertion_point(field_release:c_dialogue_baseinfo.dialogue_baseinfo.error_desc)
  clear_has_error_desc();
  return error_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dialogue_baseinfo::set_allocated_error_desc(::std::string* error_desc) {
  if (error_desc != NULL) {
    set_has_error_desc();
  } else {
    clear_has_error_desc();
  }
  error_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_desc);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_baseinfo.dialogue_baseinfo.error_desc)
}

// optional uint64 user_id = 4 [default = 0];
bool dialogue_baseinfo::has_user_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void dialogue_baseinfo::set_has_user_id() {
  _has_bits_[0] |= 0x00000100u;
}
void dialogue_baseinfo::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void dialogue_baseinfo::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::uint64 dialogue_baseinfo::user_id() const {
  // @@protoc_insertion_point(field_get:c_dialogue_baseinfo.dialogue_baseinfo.user_id)
  return user_id_;
}
void dialogue_baseinfo::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_baseinfo.dialogue_baseinfo.user_id)
}

// optional string user_nick = 5 [default = ""];
bool dialogue_baseinfo::has_user_nick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void dialogue_baseinfo::set_has_user_nick() {
  _has_bits_[0] |= 0x00000002u;
}
void dialogue_baseinfo::clear_has_user_nick() {
  _has_bits_[0] &= ~0x00000002u;
}
void dialogue_baseinfo::clear_user_nick() {
  user_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_nick();
}
const ::std::string& dialogue_baseinfo::user_nick() const {
  // @@protoc_insertion_point(field_get:c_dialogue_baseinfo.dialogue_baseinfo.user_nick)
  return user_nick_.GetNoArena();
}
void dialogue_baseinfo::set_user_nick(const ::std::string& value) {
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_baseinfo.dialogue_baseinfo.user_nick)
}
#if LANG_CXX11
void dialogue_baseinfo::set_user_nick(::std::string&& value) {
  set_has_user_nick();
  user_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_baseinfo.dialogue_baseinfo.user_nick)
}
#endif
void dialogue_baseinfo::set_user_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_baseinfo.dialogue_baseinfo.user_nick)
}
void dialogue_baseinfo::set_user_nick(const char* value, size_t size) {
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_baseinfo.dialogue_baseinfo.user_nick)
}
::std::string* dialogue_baseinfo::mutable_user_nick() {
  set_has_user_nick();
  // @@protoc_insertion_point(field_mutable:c_dialogue_baseinfo.dialogue_baseinfo.user_nick)
  return user_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dialogue_baseinfo::release_user_nick() {
  // @@protoc_insertion_point(field_release:c_dialogue_baseinfo.dialogue_baseinfo.user_nick)
  clear_has_user_nick();
  return user_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dialogue_baseinfo::set_allocated_user_nick(::std::string* user_nick) {
  if (user_nick != NULL) {
    set_has_user_nick();
  } else {
    clear_has_user_nick();
  }
  user_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_nick);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_baseinfo.dialogue_baseinfo.user_nick)
}

// optional string user_password = 6 [default = ""];
bool dialogue_baseinfo::has_user_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void dialogue_baseinfo::set_has_user_password() {
  _has_bits_[0] |= 0x00000004u;
}
void dialogue_baseinfo::clear_has_user_password() {
  _has_bits_[0] &= ~0x00000004u;
}
void dialogue_baseinfo::clear_user_password() {
  user_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_password();
}
const ::std::string& dialogue_baseinfo::user_password() const {
  // @@protoc_insertion_point(field_get:c_dialogue_baseinfo.dialogue_baseinfo.user_password)
  return user_password_.GetNoArena();
}
void dialogue_baseinfo::set_user_password(const ::std::string& value) {
  set_has_user_password();
  user_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_baseinfo.dialogue_baseinfo.user_password)
}
#if LANG_CXX11
void dialogue_baseinfo::set_user_password(::std::string&& value) {
  set_has_user_password();
  user_password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_baseinfo.dialogue_baseinfo.user_password)
}
#endif
void dialogue_baseinfo::set_user_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_password();
  user_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_baseinfo.dialogue_baseinfo.user_password)
}
void dialogue_baseinfo::set_user_password(const char* value, size_t size) {
  set_has_user_password();
  user_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_baseinfo.dialogue_baseinfo.user_password)
}
::std::string* dialogue_baseinfo::mutable_user_password() {
  set_has_user_password();
  // @@protoc_insertion_point(field_mutable:c_dialogue_baseinfo.dialogue_baseinfo.user_password)
  return user_password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dialogue_baseinfo::release_user_password() {
  // @@protoc_insertion_point(field_release:c_dialogue_baseinfo.dialogue_baseinfo.user_password)
  clear_has_user_password();
  return user_password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dialogue_baseinfo::set_allocated_user_password(::std::string* user_password) {
  if (user_password != NULL) {
    set_has_user_password();
  } else {
    clear_has_user_password();
  }
  user_password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_password);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_baseinfo.dialogue_baseinfo.user_password)
}

// optional uint64 to_user_id = 7 [default = 0];
bool dialogue_baseinfo::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void dialogue_baseinfo::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000200u;
}
void dialogue_baseinfo::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000200u;
}
void dialogue_baseinfo::clear_to_user_id() {
  to_user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_to_user_id();
}
::google::protobuf::uint64 dialogue_baseinfo::to_user_id() const {
  // @@protoc_insertion_point(field_get:c_dialogue_baseinfo.dialogue_baseinfo.to_user_id)
  return to_user_id_;
}
void dialogue_baseinfo::set_to_user_id(::google::protobuf::uint64 value) {
  set_has_to_user_id();
  to_user_id_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_baseinfo.dialogue_baseinfo.to_user_id)
}

// optional string to_user_nick = 8 [default = ""];
bool dialogue_baseinfo::has_to_user_nick() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void dialogue_baseinfo::set_has_to_user_nick() {
  _has_bits_[0] |= 0x00000008u;
}
void dialogue_baseinfo::clear_has_to_user_nick() {
  _has_bits_[0] &= ~0x00000008u;
}
void dialogue_baseinfo::clear_to_user_nick() {
  to_user_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_user_nick();
}
const ::std::string& dialogue_baseinfo::to_user_nick() const {
  // @@protoc_insertion_point(field_get:c_dialogue_baseinfo.dialogue_baseinfo.to_user_nick)
  return to_user_nick_.GetNoArena();
}
void dialogue_baseinfo::set_to_user_nick(const ::std::string& value) {
  set_has_to_user_nick();
  to_user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_baseinfo.dialogue_baseinfo.to_user_nick)
}
#if LANG_CXX11
void dialogue_baseinfo::set_to_user_nick(::std::string&& value) {
  set_has_to_user_nick();
  to_user_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_baseinfo.dialogue_baseinfo.to_user_nick)
}
#endif
void dialogue_baseinfo::set_to_user_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_to_user_nick();
  to_user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_baseinfo.dialogue_baseinfo.to_user_nick)
}
void dialogue_baseinfo::set_to_user_nick(const char* value, size_t size) {
  set_has_to_user_nick();
  to_user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_baseinfo.dialogue_baseinfo.to_user_nick)
}
::std::string* dialogue_baseinfo::mutable_to_user_nick() {
  set_has_to_user_nick();
  // @@protoc_insertion_point(field_mutable:c_dialogue_baseinfo.dialogue_baseinfo.to_user_nick)
  return to_user_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dialogue_baseinfo::release_to_user_nick() {
  // @@protoc_insertion_point(field_release:c_dialogue_baseinfo.dialogue_baseinfo.to_user_nick)
  clear_has_to_user_nick();
  return to_user_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dialogue_baseinfo::set_allocated_to_user_nick(::std::string* to_user_nick) {
  if (to_user_nick != NULL) {
    set_has_to_user_nick();
  } else {
    clear_has_to_user_nick();
  }
  to_user_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_user_nick);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_baseinfo.dialogue_baseinfo.to_user_nick)
}

// optional string talking = 9 [default = ""];
bool dialogue_baseinfo::has_talking() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void dialogue_baseinfo::set_has_talking() {
  _has_bits_[0] |= 0x00000010u;
}
void dialogue_baseinfo::clear_has_talking() {
  _has_bits_[0] &= ~0x00000010u;
}
void dialogue_baseinfo::clear_talking() {
  talking_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_talking();
}
const ::std::string& dialogue_baseinfo::talking() const {
  // @@protoc_insertion_point(field_get:c_dialogue_baseinfo.dialogue_baseinfo.talking)
  return talking_.GetNoArena();
}
void dialogue_baseinfo::set_talking(const ::std::string& value) {
  set_has_talking();
  talking_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_baseinfo.dialogue_baseinfo.talking)
}
#if LANG_CXX11
void dialogue_baseinfo::set_talking(::std::string&& value) {
  set_has_talking();
  talking_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_baseinfo.dialogue_baseinfo.talking)
}
#endif
void dialogue_baseinfo::set_talking(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_talking();
  talking_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_baseinfo.dialogue_baseinfo.talking)
}
void dialogue_baseinfo::set_talking(const char* value, size_t size) {
  set_has_talking();
  talking_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_baseinfo.dialogue_baseinfo.talking)
}
::std::string* dialogue_baseinfo::mutable_talking() {
  set_has_talking();
  // @@protoc_insertion_point(field_mutable:c_dialogue_baseinfo.dialogue_baseinfo.talking)
  return talking_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dialogue_baseinfo::release_talking() {
  // @@protoc_insertion_point(field_release:c_dialogue_baseinfo.dialogue_baseinfo.talking)
  clear_has_talking();
  return talking_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dialogue_baseinfo::set_allocated_talking(::std::string* talking) {
  if (talking != NULL) {
    set_has_talking();
  } else {
    clear_has_talking();
  }
  talking_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), talking);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_baseinfo.dialogue_baseinfo.talking)
}

// optional uint32 system_state = 10 [default = 0];
bool dialogue_baseinfo::has_system_state() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void dialogue_baseinfo::set_has_system_state() {
  _has_bits_[0] |= 0x00000400u;
}
void dialogue_baseinfo::clear_has_system_state() {
  _has_bits_[0] &= ~0x00000400u;
}
void dialogue_baseinfo::clear_system_state() {
  system_state_ = 0u;
  clear_has_system_state();
}
::google::protobuf::uint32 dialogue_baseinfo::system_state() const {
  // @@protoc_insertion_point(field_get:c_dialogue_baseinfo.dialogue_baseinfo.system_state)
  return system_state_;
}
void dialogue_baseinfo::set_system_state(::google::protobuf::uint32 value) {
  set_has_system_state();
  system_state_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_baseinfo.dialogue_baseinfo.system_state)
}

// optional string system_desc = 11 [default = ""];
bool dialogue_baseinfo::has_system_desc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void dialogue_baseinfo::set_has_system_desc() {
  _has_bits_[0] |= 0x00000020u;
}
void dialogue_baseinfo::clear_has_system_desc() {
  _has_bits_[0] &= ~0x00000020u;
}
void dialogue_baseinfo::clear_system_desc() {
  system_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_system_desc();
}
const ::std::string& dialogue_baseinfo::system_desc() const {
  // @@protoc_insertion_point(field_get:c_dialogue_baseinfo.dialogue_baseinfo.system_desc)
  return system_desc_.GetNoArena();
}
void dialogue_baseinfo::set_system_desc(const ::std::string& value) {
  set_has_system_desc();
  system_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_baseinfo.dialogue_baseinfo.system_desc)
}
#if LANG_CXX11
void dialogue_baseinfo::set_system_desc(::std::string&& value) {
  set_has_system_desc();
  system_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_baseinfo.dialogue_baseinfo.system_desc)
}
#endif
void dialogue_baseinfo::set_system_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_system_desc();
  system_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_baseinfo.dialogue_baseinfo.system_desc)
}
void dialogue_baseinfo::set_system_desc(const char* value, size_t size) {
  set_has_system_desc();
  system_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_baseinfo.dialogue_baseinfo.system_desc)
}
::std::string* dialogue_baseinfo::mutable_system_desc() {
  set_has_system_desc();
  // @@protoc_insertion_point(field_mutable:c_dialogue_baseinfo.dialogue_baseinfo.system_desc)
  return system_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dialogue_baseinfo::release_system_desc() {
  // @@protoc_insertion_point(field_release:c_dialogue_baseinfo.dialogue_baseinfo.system_desc)
  clear_has_system_desc();
  return system_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dialogue_baseinfo::set_allocated_system_desc(::std::string* system_desc) {
  if (system_desc != NULL) {
    set_has_system_desc();
  } else {
    clear_has_system_desc();
  }
  system_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), system_desc);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_baseinfo.dialogue_baseinfo.system_desc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace c_dialogue_baseinfo

// @@protoc_insertion_point(global_scope)
