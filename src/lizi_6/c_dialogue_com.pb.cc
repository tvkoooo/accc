// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: c_dialogue_com.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "c_dialogue_com.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace c_dialogue_com {
class dialogue_login_rqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<dialogue_login_rq> {
} _dialogue_login_rq_default_instance_;
class dialogue_login_rsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<dialogue_login_rs> {
} _dialogue_login_rs_default_instance_;
class dialogue_seek_rqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<dialogue_seek_rq> {
} _dialogue_seek_rq_default_instance_;
class dialogue_seek_rsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<dialogue_seek_rs> {
} _dialogue_seek_rs_default_instance_;
class dialogue_talk_rqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<dialogue_talk_rq> {
} _dialogue_talk_rq_default_instance_;
class dialogue_talk_rsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<dialogue_talk_rs> {
} _dialogue_talk_rs_default_instance_;
class dialogue_talk_ntDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<dialogue_talk_nt> {
} _dialogue_talk_nt_default_instance_;

namespace protobuf_c_5fdialogue_5fcom_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[7];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_login_rq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_login_rq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_login_rq, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_login_rq, user_nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_login_rq, user_password_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_login_rs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_login_rs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_login_rs, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_login_rs, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_login_rs, user_nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_login_rs, login_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_login_rs, login_desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_login_rs, socket_),
  2,
  3,
  0,
  4,
  1,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_seek_rq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_seek_rq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_seek_rq, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_seek_rq, user_nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_seek_rq, to_user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_seek_rq, to_user_nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_seek_rq, socket_),
  2,
  0,
  3,
  1,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_seek_rs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_seek_rs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_seek_rs, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_seek_rs, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_seek_rs, user_nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_seek_rs, to_user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_seek_rs, to_user_nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_seek_rs, seek_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_seek_rs, seek_desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_seek_rs, socket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_seek_rs, to_socket_),
  3,
  4,
  0,
  5,
  1,
  6,
  2,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_talk_rq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_talk_rq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_talk_rq, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_talk_rq, user_nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_talk_rq, to_user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_talk_rq, to_user_nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_talk_rq, talking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_talk_rq, socket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_talk_rq, to_socket_),
  3,
  0,
  4,
  1,
  2,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_talk_rs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_talk_rs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_talk_rs, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_talk_rs, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_talk_rs, user_nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_talk_rs, talk_rs_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_talk_rs, talk_rs_desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_talk_rs, socket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_talk_rs, to_socket_),
  2,
  3,
  0,
  4,
  1,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_talk_nt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_talk_nt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_talk_nt, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_talk_nt, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_talk_nt, user_nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_talk_nt, to_user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_talk_nt, to_user_nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_talk_nt, talking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_talk_nt, talk_nt_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_talk_nt, talk_nt_desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_talk_nt, socket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dialogue_talk_nt, to_socket_),
  4,
  5,
  0,
  6,
  1,
  2,
  7,
  3,
  8,
  9,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(dialogue_login_rq)},
  { 11, 22, sizeof(dialogue_login_rs)},
  { 28, 38, sizeof(dialogue_seek_rq)},
  { 43, 57, sizeof(dialogue_seek_rs)},
  { 66, 78, sizeof(dialogue_talk_rq)},
  { 85, 97, sizeof(dialogue_talk_rs)},
  { 104, 119, sizeof(dialogue_talk_nt)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_dialogue_login_rq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_dialogue_login_rs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_dialogue_seek_rq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_dialogue_seek_rs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_dialogue_talk_rq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_dialogue_talk_rs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_dialogue_talk_nt_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "c_dialogue_com.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace

void TableStruct::Shutdown() {
  _dialogue_login_rq_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _dialogue_login_rs_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _dialogue_seek_rq_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _dialogue_seek_rs_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _dialogue_talk_rq_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _dialogue_talk_rs_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _dialogue_talk_nt_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::b_error::protobuf_b_5ferror_2eproto::InitDefaults();
  _dialogue_login_rq_default_instance_.DefaultConstruct();
  _dialogue_login_rs_default_instance_.DefaultConstruct();
  _dialogue_seek_rq_default_instance_.DefaultConstruct();
  _dialogue_seek_rs_default_instance_.DefaultConstruct();
  _dialogue_talk_rq_default_instance_.DefaultConstruct();
  _dialogue_talk_rs_default_instance_.DefaultConstruct();
  _dialogue_talk_nt_default_instance_.DefaultConstruct();
  _dialogue_login_rs_default_instance_.get_mutable()->error_ = const_cast< ::b_error::info*>(
      ::b_error::info::internal_default_instance());
  _dialogue_seek_rs_default_instance_.get_mutable()->error_ = const_cast< ::b_error::info*>(
      ::b_error::info::internal_default_instance());
  _dialogue_talk_rs_default_instance_.get_mutable()->error_ = const_cast< ::b_error::info*>(
      ::b_error::info::internal_default_instance());
  _dialogue_talk_nt_default_instance_.get_mutable()->error_ = const_cast< ::b_error::info*>(
      ::b_error::info::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\024c_dialogue_com.proto\022\016c_dialogue_com\032\r"
      "b_error.proto\"g\n\021dialogue_login_rq\022\022\n\007us"
      "er_id\030\001 \001(\004:\0010\022\023\n\tuser_nick\030\002 \001(\t:\000\022\027\n\ru"
      "ser_password\030\003 \001(\t:\000\"\020\n\003msg\022\t\n\002id\020\201\200\200\023\"\255"
      "\001\n\021dialogue_login_rs\022\034\n\005error\030\001 \001(\0132\r.b_"
      "error.info\022\022\n\007user_id\030\002 \001(\004:\0010\022\023\n\tuser_n"
      "ick\030\003 \001(\t:\000\022\026\n\013login_state\030\004 \001(\r:\0010\022\024\n\nl"
      "ogin_desc\030\005 \001(\014:\000\022\021\n\006socket\030\006 \001(\r:\0010\"\020\n\003"
      "msg\022\t\n\002id\020\202\200\200\023\"\217\001\n\020dialogue_seek_rq\022\022\n\007u"
      "ser_id\030\001 \001(\004:\0010\022\023\n\tuser_nick\030\002 \001(\t:\000\022\025\n\n"
      "to_user_id\030\003 \001(\004:\0010\022\026\n\014to_user_nick\030\004 \001("
      "\t:\000\022\021\n\006socket\030\005 \001(\r:\0010\"\020\n\003msg\022\t\n\002id\020\221\200\200\023"
      "\"\357\001\n\020dialogue_seek_rs\022\034\n\005error\030\001 \001(\0132\r.b"
      "_error.info\022\022\n\007user_id\030\002 \001(\004:\0010\022\023\n\tuser_"
      "nick\030\003 \001(\t:\000\022\025\n\nto_user_id\030\004 \001(\004:\0010\022\026\n\014t"
      "o_user_nick\030\005 \001(\t:\000\022\025\n\nseek_state\030\006 \001(\r:"
      "\0010\022\023\n\tseek_desc\030\007 \001(\014:\000\022\021\n\006socket\030\010 \001(\r:"
      "\0010\022\024\n\tto_socket\030\t \001(\r:\0010\"\020\n\003msg\022\t\n\002id\020\222\200"
      "\200\023\"\270\001\n\020dialogue_talk_rq\022\022\n\007user_id\030\001 \001(\004"
      ":\0010\022\023\n\tuser_nick\030\002 \001(\t:\000\022\025\n\nto_user_id\030\003"
      " \001(\004:\0010\022\026\n\014to_user_nick\030\004 \001(\t:\000\022\021\n\007talki"
      "ng\030\005 \001(\014:\000\022\021\n\006socket\030\006 \001(\r:\0010\022\024\n\tto_sock"
      "et\030\007 \001(\r:\0010\"\020\n\003msg\022\t\n\002id\020\241\200\200\023\"\306\001\n\020dialog"
      "ue_talk_rs\022\034\n\005error\030\001 \001(\0132\r.b_error.info"
      "\022\022\n\007user_id\030\002 \001(\004:\0010\022\023\n\tuser_nick\030\003 \001(\t:"
      "\000\022\030\n\rtalk_rs_state\030\004 \001(\r:\0010\022\026\n\014talk_rs_d"
      "esc\030\005 \001(\014:\000\022\021\n\006socket\030\006 \001(\r:\0010\022\024\n\tto_soc"
      "ket\030\007 \001(\r:\0010\"\020\n\003msg\022\t\n\002id\020\242\200\200\023\"\210\002\n\020dialo"
      "gue_talk_nt\022\034\n\005error\030\001 \001(\0132\r.b_error.inf"
      "o\022\022\n\007user_id\030\002 \001(\004:\0010\022\023\n\tuser_nick\030\003 \001(\t"
      ":\000\022\025\n\nto_user_id\030\004 \001(\004:\0010\022\026\n\014to_user_nic"
      "k\030\005 \001(\t:\000\022\021\n\007talking\030\006 \001(\014:\000\022\030\n\rtalk_nt_"
      "state\030\007 \001(\r:\0010\022\026\n\014talk_nt_desc\030\010 \001(\014:\000\022\021"
      "\n\006socket\030\t \001(\r:\0010\022\024\n\tto_socket\030\n \001(\r:\0010\""
      "\020\n\003msg\022\t\n\002id\020\243\200\200\023BV\n\010protodefB\016c_dialogu"
      "e_comZ\027protodef/c_dialogue_com\242\002\017C_dialo"
      "gue_com_\252\002\016c_dialogue_com"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1465);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "c_dialogue_com.proto", &protobuf_RegisterTypes);
  ::b_error::protobuf_b_5ferror_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_c_5fdialogue_5fcom_2eproto

const ::google::protobuf::EnumDescriptor* dialogue_login_rq_msg_descriptor() {
  protobuf_c_5fdialogue_5fcom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fdialogue_5fcom_2eproto::file_level_enum_descriptors[0];
}
bool dialogue_login_rq_msg_IsValid(int value) {
  switch (value) {
    case 39845889:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const dialogue_login_rq_msg dialogue_login_rq::id;
const dialogue_login_rq_msg dialogue_login_rq::msg_MIN;
const dialogue_login_rq_msg dialogue_login_rq::msg_MAX;
const int dialogue_login_rq::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* dialogue_login_rs_msg_descriptor() {
  protobuf_c_5fdialogue_5fcom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fdialogue_5fcom_2eproto::file_level_enum_descriptors[1];
}
bool dialogue_login_rs_msg_IsValid(int value) {
  switch (value) {
    case 39845890:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const dialogue_login_rs_msg dialogue_login_rs::id;
const dialogue_login_rs_msg dialogue_login_rs::msg_MIN;
const dialogue_login_rs_msg dialogue_login_rs::msg_MAX;
const int dialogue_login_rs::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* dialogue_seek_rq_msg_descriptor() {
  protobuf_c_5fdialogue_5fcom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fdialogue_5fcom_2eproto::file_level_enum_descriptors[2];
}
bool dialogue_seek_rq_msg_IsValid(int value) {
  switch (value) {
    case 39845905:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const dialogue_seek_rq_msg dialogue_seek_rq::id;
const dialogue_seek_rq_msg dialogue_seek_rq::msg_MIN;
const dialogue_seek_rq_msg dialogue_seek_rq::msg_MAX;
const int dialogue_seek_rq::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* dialogue_seek_rs_msg_descriptor() {
  protobuf_c_5fdialogue_5fcom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fdialogue_5fcom_2eproto::file_level_enum_descriptors[3];
}
bool dialogue_seek_rs_msg_IsValid(int value) {
  switch (value) {
    case 39845906:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const dialogue_seek_rs_msg dialogue_seek_rs::id;
const dialogue_seek_rs_msg dialogue_seek_rs::msg_MIN;
const dialogue_seek_rs_msg dialogue_seek_rs::msg_MAX;
const int dialogue_seek_rs::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* dialogue_talk_rq_msg_descriptor() {
  protobuf_c_5fdialogue_5fcom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fdialogue_5fcom_2eproto::file_level_enum_descriptors[4];
}
bool dialogue_talk_rq_msg_IsValid(int value) {
  switch (value) {
    case 39845921:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const dialogue_talk_rq_msg dialogue_talk_rq::id;
const dialogue_talk_rq_msg dialogue_talk_rq::msg_MIN;
const dialogue_talk_rq_msg dialogue_talk_rq::msg_MAX;
const int dialogue_talk_rq::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* dialogue_talk_rs_msg_descriptor() {
  protobuf_c_5fdialogue_5fcom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fdialogue_5fcom_2eproto::file_level_enum_descriptors[5];
}
bool dialogue_talk_rs_msg_IsValid(int value) {
  switch (value) {
    case 39845922:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const dialogue_talk_rs_msg dialogue_talk_rs::id;
const dialogue_talk_rs_msg dialogue_talk_rs::msg_MIN;
const dialogue_talk_rs_msg dialogue_talk_rs::msg_MAX;
const int dialogue_talk_rs::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* dialogue_talk_nt_msg_descriptor() {
  protobuf_c_5fdialogue_5fcom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fdialogue_5fcom_2eproto::file_level_enum_descriptors[6];
}
bool dialogue_talk_nt_msg_IsValid(int value) {
  switch (value) {
    case 39845923:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const dialogue_talk_nt_msg dialogue_talk_nt::id;
const dialogue_talk_nt_msg dialogue_talk_nt::msg_MIN;
const dialogue_talk_nt_msg dialogue_talk_nt::msg_MAX;
const int dialogue_talk_nt::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int dialogue_login_rq::kUserIdFieldNumber;
const int dialogue_login_rq::kUserNickFieldNumber;
const int dialogue_login_rq::kUserPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

dialogue_login_rq::dialogue_login_rq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fdialogue_5fcom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_dialogue_com.dialogue_login_rq)
}
dialogue_login_rq::dialogue_login_rq(const dialogue_login_rq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_nick()) {
    user_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_nick_);
  }
  user_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_password()) {
    user_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_password_);
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:c_dialogue_com.dialogue_login_rq)
}

void dialogue_login_rq::SharedCtor() {
  _cached_size_ = 0;
  user_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = GOOGLE_ULONGLONG(0);
}

dialogue_login_rq::~dialogue_login_rq() {
  // @@protoc_insertion_point(destructor:c_dialogue_com.dialogue_login_rq)
  SharedDtor();
}

void dialogue_login_rq::SharedDtor() {
  user_nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void dialogue_login_rq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dialogue_login_rq::descriptor() {
  protobuf_c_5fdialogue_5fcom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fdialogue_5fcom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const dialogue_login_rq& dialogue_login_rq::default_instance() {
  protobuf_c_5fdialogue_5fcom_2eproto::InitDefaults();
  return *internal_default_instance();
}

dialogue_login_rq* dialogue_login_rq::New(::google::protobuf::Arena* arena) const {
  dialogue_login_rq* n = new dialogue_login_rq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void dialogue_login_rq::Clear() {
// @@protoc_insertion_point(message_clear_start:c_dialogue_com.dialogue_login_rq)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_user_nick()) {
      GOOGLE_DCHECK(!user_nick_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_nick_.UnsafeRawStringPointer())->clear();
    }
    if (has_user_password()) {
      GOOGLE_DCHECK(!user_password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_password_.UnsafeRawStringPointer())->clear();
    }
  }
  user_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool dialogue_login_rq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_dialogue_com.dialogue_login_rq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_nick = 2 [default = ""];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_nick().data(), this->user_nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "c_dialogue_com.dialogue_login_rq.user_nick");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_password = 3 [default = ""];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_password().data(), this->user_password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "c_dialogue_com.dialogue_login_rq.user_password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_dialogue_com.dialogue_login_rq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_dialogue_com.dialogue_login_rq)
  return false;
#undef DO_
}

void dialogue_login_rq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_dialogue_com.dialogue_login_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 user_id = 1 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional string user_nick = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_nick().data(), this->user_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_dialogue_com.dialogue_login_rq.user_nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_nick(), output);
  }

  // optional string user_password = 3 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_password().data(), this->user_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_dialogue_com.dialogue_login_rq.user_password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_dialogue_com.dialogue_login_rq)
}

::google::protobuf::uint8* dialogue_login_rq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_dialogue_com.dialogue_login_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 user_id = 1 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional string user_nick = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_nick().data(), this->user_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_dialogue_com.dialogue_login_rq.user_nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_nick(), target);
  }

  // optional string user_password = 3 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_password().data(), this->user_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_dialogue_com.dialogue_login_rq.user_password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_dialogue_com.dialogue_login_rq)
  return target;
}

size_t dialogue_login_rq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_dialogue_com.dialogue_login_rq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string user_nick = 2 [default = ""];
    if (has_user_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_nick());
    }

    // optional string user_password = 3 [default = ""];
    if (has_user_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_password());
    }

    // optional uint64 user_id = 1 [default = 0];
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dialogue_login_rq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_dialogue_com.dialogue_login_rq)
  GOOGLE_DCHECK_NE(&from, this);
  const dialogue_login_rq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const dialogue_login_rq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_dialogue_com.dialogue_login_rq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_dialogue_com.dialogue_login_rq)
    MergeFrom(*source);
  }
}

void dialogue_login_rq::MergeFrom(const dialogue_login_rq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_dialogue_com.dialogue_login_rq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_user_nick();
      user_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_nick_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_user_password();
      user_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_password_);
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void dialogue_login_rq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_dialogue_com.dialogue_login_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dialogue_login_rq::CopyFrom(const dialogue_login_rq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_dialogue_com.dialogue_login_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dialogue_login_rq::IsInitialized() const {
  return true;
}

void dialogue_login_rq::Swap(dialogue_login_rq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void dialogue_login_rq::InternalSwap(dialogue_login_rq* other) {
  user_nick_.Swap(&other->user_nick_);
  user_password_.Swap(&other->user_password_);
  std::swap(user_id_, other->user_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata dialogue_login_rq::GetMetadata() const {
  protobuf_c_5fdialogue_5fcom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fdialogue_5fcom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// dialogue_login_rq

// optional uint64 user_id = 1 [default = 0];
bool dialogue_login_rq::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void dialogue_login_rq::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
void dialogue_login_rq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void dialogue_login_rq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::uint64 dialogue_login_rq::user_id() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_login_rq.user_id)
  return user_id_;
}
void dialogue_login_rq::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_login_rq.user_id)
}

// optional string user_nick = 2 [default = ""];
bool dialogue_login_rq::has_user_nick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void dialogue_login_rq::set_has_user_nick() {
  _has_bits_[0] |= 0x00000001u;
}
void dialogue_login_rq::clear_has_user_nick() {
  _has_bits_[0] &= ~0x00000001u;
}
void dialogue_login_rq::clear_user_nick() {
  user_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_nick();
}
const ::std::string& dialogue_login_rq::user_nick() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_login_rq.user_nick)
  return user_nick_.GetNoArena();
}
void dialogue_login_rq::set_user_nick(const ::std::string& value) {
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_login_rq.user_nick)
}
#if LANG_CXX11
void dialogue_login_rq::set_user_nick(::std::string&& value) {
  set_has_user_nick();
  user_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_com.dialogue_login_rq.user_nick)
}
#endif
void dialogue_login_rq::set_user_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_com.dialogue_login_rq.user_nick)
}
void dialogue_login_rq::set_user_nick(const char* value, size_t size) {
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_com.dialogue_login_rq.user_nick)
}
::std::string* dialogue_login_rq::mutable_user_nick() {
  set_has_user_nick();
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_login_rq.user_nick)
  return user_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dialogue_login_rq::release_user_nick() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_login_rq.user_nick)
  clear_has_user_nick();
  return user_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dialogue_login_rq::set_allocated_user_nick(::std::string* user_nick) {
  if (user_nick != NULL) {
    set_has_user_nick();
  } else {
    clear_has_user_nick();
  }
  user_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_nick);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_login_rq.user_nick)
}

// optional string user_password = 3 [default = ""];
bool dialogue_login_rq::has_user_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void dialogue_login_rq::set_has_user_password() {
  _has_bits_[0] |= 0x00000002u;
}
void dialogue_login_rq::clear_has_user_password() {
  _has_bits_[0] &= ~0x00000002u;
}
void dialogue_login_rq::clear_user_password() {
  user_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_password();
}
const ::std::string& dialogue_login_rq::user_password() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_login_rq.user_password)
  return user_password_.GetNoArena();
}
void dialogue_login_rq::set_user_password(const ::std::string& value) {
  set_has_user_password();
  user_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_login_rq.user_password)
}
#if LANG_CXX11
void dialogue_login_rq::set_user_password(::std::string&& value) {
  set_has_user_password();
  user_password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_com.dialogue_login_rq.user_password)
}
#endif
void dialogue_login_rq::set_user_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_password();
  user_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_com.dialogue_login_rq.user_password)
}
void dialogue_login_rq::set_user_password(const char* value, size_t size) {
  set_has_user_password();
  user_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_com.dialogue_login_rq.user_password)
}
::std::string* dialogue_login_rq::mutable_user_password() {
  set_has_user_password();
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_login_rq.user_password)
  return user_password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dialogue_login_rq::release_user_password() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_login_rq.user_password)
  clear_has_user_password();
  return user_password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dialogue_login_rq::set_allocated_user_password(::std::string* user_password) {
  if (user_password != NULL) {
    set_has_user_password();
  } else {
    clear_has_user_password();
  }
  user_password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_password);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_login_rq.user_password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int dialogue_login_rs::kErrorFieldNumber;
const int dialogue_login_rs::kUserIdFieldNumber;
const int dialogue_login_rs::kUserNickFieldNumber;
const int dialogue_login_rs::kLoginStateFieldNumber;
const int dialogue_login_rs::kLoginDescFieldNumber;
const int dialogue_login_rs::kSocketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

dialogue_login_rs::dialogue_login_rs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fdialogue_5fcom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_dialogue_com.dialogue_login_rs)
}
dialogue_login_rs::dialogue_login_rs(const dialogue_login_rs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_nick()) {
    user_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_nick_);
  }
  login_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_login_desc()) {
    login_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.login_desc_);
  }
  if (from.has_error()) {
    error_ = new ::b_error::info(*from.error_);
  } else {
    error_ = NULL;
  }
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&socket_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(socket_));
  // @@protoc_insertion_point(copy_constructor:c_dialogue_com.dialogue_login_rs)
}

void dialogue_login_rs::SharedCtor() {
  _cached_size_ = 0;
  user_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_, 0, reinterpret_cast<char*>(&socket_) -
    reinterpret_cast<char*>(&error_) + sizeof(socket_));
}

dialogue_login_rs::~dialogue_login_rs() {
  // @@protoc_insertion_point(destructor:c_dialogue_com.dialogue_login_rs)
  SharedDtor();
}

void dialogue_login_rs::SharedDtor() {
  user_nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete error_;
  }
}

void dialogue_login_rs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dialogue_login_rs::descriptor() {
  protobuf_c_5fdialogue_5fcom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fdialogue_5fcom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const dialogue_login_rs& dialogue_login_rs::default_instance() {
  protobuf_c_5fdialogue_5fcom_2eproto::InitDefaults();
  return *internal_default_instance();
}

dialogue_login_rs* dialogue_login_rs::New(::google::protobuf::Arena* arena) const {
  dialogue_login_rs* n = new dialogue_login_rs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void dialogue_login_rs::Clear() {
// @@protoc_insertion_point(message_clear_start:c_dialogue_com.dialogue_login_rs)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_user_nick()) {
      GOOGLE_DCHECK(!user_nick_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_nick_.UnsafeRawStringPointer())->clear();
    }
    if (has_login_desc()) {
      GOOGLE_DCHECK(!login_desc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*login_desc_.UnsafeRawStringPointer())->clear();
    }
    if (has_error()) {
      GOOGLE_DCHECK(error_ != NULL);
      error_->::b_error::info::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 56u) {
    ::memset(&user_id_, 0, reinterpret_cast<char*>(&socket_) -
      reinterpret_cast<char*>(&user_id_) + sizeof(socket_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool dialogue_login_rs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_dialogue_com.dialogue_login_rs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .b_error.info error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 user_id = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_nick = 3 [default = ""];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_nick().data(), this->user_nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "c_dialogue_com.dialogue_login_rs.user_nick");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 login_state = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_login_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &login_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes login_desc = 5 [default = ""];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_login_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 socket = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_socket();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &socket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_dialogue_com.dialogue_login_rs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_dialogue_com.dialogue_login_rs)
  return false;
#undef DO_
}

void dialogue_login_rs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_dialogue_com.dialogue_login_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .b_error.info error = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  // optional uint64 user_id = 2 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional string user_nick = 3 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_nick().data(), this->user_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_dialogue_com.dialogue_login_rs.user_nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_nick(), output);
  }

  // optional uint32 login_state = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->login_state(), output);
  }

  // optional bytes login_desc = 5 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->login_desc(), output);
  }

  // optional uint32 socket = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->socket(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_dialogue_com.dialogue_login_rs)
}

::google::protobuf::uint8* dialogue_login_rs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_dialogue_com.dialogue_login_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .b_error.info error = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, deterministic, target);
  }

  // optional uint64 user_id = 2 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional string user_nick = 3 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_nick().data(), this->user_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_dialogue_com.dialogue_login_rs.user_nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_nick(), target);
  }

  // optional uint32 login_state = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->login_state(), target);
  }

  // optional bytes login_desc = 5 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->login_desc(), target);
  }

  // optional uint32 socket = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->socket(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_dialogue_com.dialogue_login_rs)
  return target;
}

size_t dialogue_login_rs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_dialogue_com.dialogue_login_rs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string user_nick = 3 [default = ""];
    if (has_user_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_nick());
    }

    // optional bytes login_desc = 5 [default = ""];
    if (has_login_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->login_desc());
    }

    // optional .b_error.info error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->error_);
    }

    // optional uint64 user_id = 2 [default = 0];
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint32 login_state = 4 [default = 0];
    if (has_login_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->login_state());
    }

    // optional uint32 socket = 6 [default = 0];
    if (has_socket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->socket());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dialogue_login_rs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_dialogue_com.dialogue_login_rs)
  GOOGLE_DCHECK_NE(&from, this);
  const dialogue_login_rs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const dialogue_login_rs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_dialogue_com.dialogue_login_rs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_dialogue_com.dialogue_login_rs)
    MergeFrom(*source);
  }
}

void dialogue_login_rs::MergeFrom(const dialogue_login_rs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_dialogue_com.dialogue_login_rs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_user_nick();
      user_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_nick_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_login_desc();
      login_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.login_desc_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_error()->::b_error::info::MergeFrom(from.error());
    }
    if (cached_has_bits & 0x00000008u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      login_state_ = from.login_state_;
    }
    if (cached_has_bits & 0x00000020u) {
      socket_ = from.socket_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void dialogue_login_rs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_dialogue_com.dialogue_login_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dialogue_login_rs::CopyFrom(const dialogue_login_rs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_dialogue_com.dialogue_login_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dialogue_login_rs::IsInitialized() const {
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void dialogue_login_rs::Swap(dialogue_login_rs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void dialogue_login_rs::InternalSwap(dialogue_login_rs* other) {
  user_nick_.Swap(&other->user_nick_);
  login_desc_.Swap(&other->login_desc_);
  std::swap(error_, other->error_);
  std::swap(user_id_, other->user_id_);
  std::swap(login_state_, other->login_state_);
  std::swap(socket_, other->socket_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata dialogue_login_rs::GetMetadata() const {
  protobuf_c_5fdialogue_5fcom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fdialogue_5fcom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// dialogue_login_rs

// optional .b_error.info error = 1;
bool dialogue_login_rs::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void dialogue_login_rs::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
void dialogue_login_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
void dialogue_login_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
const ::b_error::info& dialogue_login_rs::error() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_login_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
::b_error::info* dialogue_login_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_login_rs.error)
  return error_;
}
::b_error::info* dialogue_login_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_login_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
void dialogue_login_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_login_rs.error)
}

// optional uint64 user_id = 2 [default = 0];
bool dialogue_login_rs::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void dialogue_login_rs::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
void dialogue_login_rs::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void dialogue_login_rs::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::uint64 dialogue_login_rs::user_id() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_login_rs.user_id)
  return user_id_;
}
void dialogue_login_rs::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_login_rs.user_id)
}

// optional string user_nick = 3 [default = ""];
bool dialogue_login_rs::has_user_nick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void dialogue_login_rs::set_has_user_nick() {
  _has_bits_[0] |= 0x00000001u;
}
void dialogue_login_rs::clear_has_user_nick() {
  _has_bits_[0] &= ~0x00000001u;
}
void dialogue_login_rs::clear_user_nick() {
  user_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_nick();
}
const ::std::string& dialogue_login_rs::user_nick() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_login_rs.user_nick)
  return user_nick_.GetNoArena();
}
void dialogue_login_rs::set_user_nick(const ::std::string& value) {
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_login_rs.user_nick)
}
#if LANG_CXX11
void dialogue_login_rs::set_user_nick(::std::string&& value) {
  set_has_user_nick();
  user_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_com.dialogue_login_rs.user_nick)
}
#endif
void dialogue_login_rs::set_user_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_com.dialogue_login_rs.user_nick)
}
void dialogue_login_rs::set_user_nick(const char* value, size_t size) {
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_com.dialogue_login_rs.user_nick)
}
::std::string* dialogue_login_rs::mutable_user_nick() {
  set_has_user_nick();
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_login_rs.user_nick)
  return user_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dialogue_login_rs::release_user_nick() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_login_rs.user_nick)
  clear_has_user_nick();
  return user_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dialogue_login_rs::set_allocated_user_nick(::std::string* user_nick) {
  if (user_nick != NULL) {
    set_has_user_nick();
  } else {
    clear_has_user_nick();
  }
  user_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_nick);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_login_rs.user_nick)
}

// optional uint32 login_state = 4 [default = 0];
bool dialogue_login_rs::has_login_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void dialogue_login_rs::set_has_login_state() {
  _has_bits_[0] |= 0x00000010u;
}
void dialogue_login_rs::clear_has_login_state() {
  _has_bits_[0] &= ~0x00000010u;
}
void dialogue_login_rs::clear_login_state() {
  login_state_ = 0u;
  clear_has_login_state();
}
::google::protobuf::uint32 dialogue_login_rs::login_state() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_login_rs.login_state)
  return login_state_;
}
void dialogue_login_rs::set_login_state(::google::protobuf::uint32 value) {
  set_has_login_state();
  login_state_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_login_rs.login_state)
}

// optional bytes login_desc = 5 [default = ""];
bool dialogue_login_rs::has_login_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void dialogue_login_rs::set_has_login_desc() {
  _has_bits_[0] |= 0x00000002u;
}
void dialogue_login_rs::clear_has_login_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
void dialogue_login_rs::clear_login_desc() {
  login_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_login_desc();
}
const ::std::string& dialogue_login_rs::login_desc() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_login_rs.login_desc)
  return login_desc_.GetNoArena();
}
void dialogue_login_rs::set_login_desc(const ::std::string& value) {
  set_has_login_desc();
  login_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_login_rs.login_desc)
}
#if LANG_CXX11
void dialogue_login_rs::set_login_desc(::std::string&& value) {
  set_has_login_desc();
  login_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_com.dialogue_login_rs.login_desc)
}
#endif
void dialogue_login_rs::set_login_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_login_desc();
  login_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_com.dialogue_login_rs.login_desc)
}
void dialogue_login_rs::set_login_desc(const void* value, size_t size) {
  set_has_login_desc();
  login_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_com.dialogue_login_rs.login_desc)
}
::std::string* dialogue_login_rs::mutable_login_desc() {
  set_has_login_desc();
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_login_rs.login_desc)
  return login_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dialogue_login_rs::release_login_desc() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_login_rs.login_desc)
  clear_has_login_desc();
  return login_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dialogue_login_rs::set_allocated_login_desc(::std::string* login_desc) {
  if (login_desc != NULL) {
    set_has_login_desc();
  } else {
    clear_has_login_desc();
  }
  login_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login_desc);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_login_rs.login_desc)
}

// optional uint32 socket = 6 [default = 0];
bool dialogue_login_rs::has_socket() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void dialogue_login_rs::set_has_socket() {
  _has_bits_[0] |= 0x00000020u;
}
void dialogue_login_rs::clear_has_socket() {
  _has_bits_[0] &= ~0x00000020u;
}
void dialogue_login_rs::clear_socket() {
  socket_ = 0u;
  clear_has_socket();
}
::google::protobuf::uint32 dialogue_login_rs::socket() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_login_rs.socket)
  return socket_;
}
void dialogue_login_rs::set_socket(::google::protobuf::uint32 value) {
  set_has_socket();
  socket_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_login_rs.socket)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int dialogue_seek_rq::kUserIdFieldNumber;
const int dialogue_seek_rq::kUserNickFieldNumber;
const int dialogue_seek_rq::kToUserIdFieldNumber;
const int dialogue_seek_rq::kToUserNickFieldNumber;
const int dialogue_seek_rq::kSocketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

dialogue_seek_rq::dialogue_seek_rq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fdialogue_5fcom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_dialogue_com.dialogue_seek_rq)
}
dialogue_seek_rq::dialogue_seek_rq(const dialogue_seek_rq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_nick()) {
    user_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_nick_);
  }
  to_user_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_to_user_nick()) {
    to_user_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_user_nick_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&socket_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(socket_));
  // @@protoc_insertion_point(copy_constructor:c_dialogue_com.dialogue_seek_rq)
}

void dialogue_seek_rq::SharedCtor() {
  _cached_size_ = 0;
  user_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_user_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&socket_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(socket_));
}

dialogue_seek_rq::~dialogue_seek_rq() {
  // @@protoc_insertion_point(destructor:c_dialogue_com.dialogue_seek_rq)
  SharedDtor();
}

void dialogue_seek_rq::SharedDtor() {
  user_nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_user_nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void dialogue_seek_rq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dialogue_seek_rq::descriptor() {
  protobuf_c_5fdialogue_5fcom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fdialogue_5fcom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const dialogue_seek_rq& dialogue_seek_rq::default_instance() {
  protobuf_c_5fdialogue_5fcom_2eproto::InitDefaults();
  return *internal_default_instance();
}

dialogue_seek_rq* dialogue_seek_rq::New(::google::protobuf::Arena* arena) const {
  dialogue_seek_rq* n = new dialogue_seek_rq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void dialogue_seek_rq::Clear() {
// @@protoc_insertion_point(message_clear_start:c_dialogue_com.dialogue_seek_rq)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_user_nick()) {
      GOOGLE_DCHECK(!user_nick_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_nick_.UnsafeRawStringPointer())->clear();
    }
    if (has_to_user_nick()) {
      GOOGLE_DCHECK(!to_user_nick_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*to_user_nick_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&user_id_, 0, reinterpret_cast<char*>(&socket_) -
      reinterpret_cast<char*>(&user_id_) + sizeof(socket_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool dialogue_seek_rq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_dialogue_com.dialogue_seek_rq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_nick = 2 [default = ""];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_nick().data(), this->user_nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "c_dialogue_com.dialogue_seek_rq.user_nick");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 to_user_id = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_to_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string to_user_nick = 4 [default = ""];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_user_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->to_user_nick().data(), this->to_user_nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "c_dialogue_com.dialogue_seek_rq.to_user_nick");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 socket = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_socket();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &socket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_dialogue_com.dialogue_seek_rq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_dialogue_com.dialogue_seek_rq)
  return false;
#undef DO_
}

void dialogue_seek_rq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_dialogue_com.dialogue_seek_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 user_id = 1 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional string user_nick = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_nick().data(), this->user_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_dialogue_com.dialogue_seek_rq.user_nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_nick(), output);
  }

  // optional uint64 to_user_id = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->to_user_id(), output);
  }

  // optional string to_user_nick = 4 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_user_nick().data(), this->to_user_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_dialogue_com.dialogue_seek_rq.to_user_nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->to_user_nick(), output);
  }

  // optional uint32 socket = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->socket(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_dialogue_com.dialogue_seek_rq)
}

::google::protobuf::uint8* dialogue_seek_rq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_dialogue_com.dialogue_seek_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 user_id = 1 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional string user_nick = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_nick().data(), this->user_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_dialogue_com.dialogue_seek_rq.user_nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_nick(), target);
  }

  // optional uint64 to_user_id = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->to_user_id(), target);
  }

  // optional string to_user_nick = 4 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_user_nick().data(), this->to_user_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_dialogue_com.dialogue_seek_rq.to_user_nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->to_user_nick(), target);
  }

  // optional uint32 socket = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->socket(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_dialogue_com.dialogue_seek_rq)
  return target;
}

size_t dialogue_seek_rq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_dialogue_com.dialogue_seek_rq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string user_nick = 2 [default = ""];
    if (has_user_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_nick());
    }

    // optional string to_user_nick = 4 [default = ""];
    if (has_to_user_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_user_nick());
    }

    // optional uint64 user_id = 1 [default = 0];
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 to_user_id = 3 [default = 0];
    if (has_to_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_user_id());
    }

    // optional uint32 socket = 5 [default = 0];
    if (has_socket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->socket());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dialogue_seek_rq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_dialogue_com.dialogue_seek_rq)
  GOOGLE_DCHECK_NE(&from, this);
  const dialogue_seek_rq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const dialogue_seek_rq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_dialogue_com.dialogue_seek_rq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_dialogue_com.dialogue_seek_rq)
    MergeFrom(*source);
  }
}

void dialogue_seek_rq::MergeFrom(const dialogue_seek_rq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_dialogue_com.dialogue_seek_rq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_user_nick();
      user_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_nick_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_to_user_nick();
      to_user_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_user_nick_);
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      to_user_id_ = from.to_user_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      socket_ = from.socket_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void dialogue_seek_rq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_dialogue_com.dialogue_seek_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dialogue_seek_rq::CopyFrom(const dialogue_seek_rq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_dialogue_com.dialogue_seek_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dialogue_seek_rq::IsInitialized() const {
  return true;
}

void dialogue_seek_rq::Swap(dialogue_seek_rq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void dialogue_seek_rq::InternalSwap(dialogue_seek_rq* other) {
  user_nick_.Swap(&other->user_nick_);
  to_user_nick_.Swap(&other->to_user_nick_);
  std::swap(user_id_, other->user_id_);
  std::swap(to_user_id_, other->to_user_id_);
  std::swap(socket_, other->socket_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata dialogue_seek_rq::GetMetadata() const {
  protobuf_c_5fdialogue_5fcom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fdialogue_5fcom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// dialogue_seek_rq

// optional uint64 user_id = 1 [default = 0];
bool dialogue_seek_rq::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void dialogue_seek_rq::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
void dialogue_seek_rq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void dialogue_seek_rq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::uint64 dialogue_seek_rq::user_id() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_seek_rq.user_id)
  return user_id_;
}
void dialogue_seek_rq::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_seek_rq.user_id)
}

// optional string user_nick = 2 [default = ""];
bool dialogue_seek_rq::has_user_nick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void dialogue_seek_rq::set_has_user_nick() {
  _has_bits_[0] |= 0x00000001u;
}
void dialogue_seek_rq::clear_has_user_nick() {
  _has_bits_[0] &= ~0x00000001u;
}
void dialogue_seek_rq::clear_user_nick() {
  user_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_nick();
}
const ::std::string& dialogue_seek_rq::user_nick() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_seek_rq.user_nick)
  return user_nick_.GetNoArena();
}
void dialogue_seek_rq::set_user_nick(const ::std::string& value) {
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_seek_rq.user_nick)
}
#if LANG_CXX11
void dialogue_seek_rq::set_user_nick(::std::string&& value) {
  set_has_user_nick();
  user_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_com.dialogue_seek_rq.user_nick)
}
#endif
void dialogue_seek_rq::set_user_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_com.dialogue_seek_rq.user_nick)
}
void dialogue_seek_rq::set_user_nick(const char* value, size_t size) {
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_com.dialogue_seek_rq.user_nick)
}
::std::string* dialogue_seek_rq::mutable_user_nick() {
  set_has_user_nick();
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_seek_rq.user_nick)
  return user_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dialogue_seek_rq::release_user_nick() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_seek_rq.user_nick)
  clear_has_user_nick();
  return user_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dialogue_seek_rq::set_allocated_user_nick(::std::string* user_nick) {
  if (user_nick != NULL) {
    set_has_user_nick();
  } else {
    clear_has_user_nick();
  }
  user_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_nick);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_seek_rq.user_nick)
}

// optional uint64 to_user_id = 3 [default = 0];
bool dialogue_seek_rq::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void dialogue_seek_rq::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
void dialogue_seek_rq::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void dialogue_seek_rq::clear_to_user_id() {
  to_user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_to_user_id();
}
::google::protobuf::uint64 dialogue_seek_rq::to_user_id() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_seek_rq.to_user_id)
  return to_user_id_;
}
void dialogue_seek_rq::set_to_user_id(::google::protobuf::uint64 value) {
  set_has_to_user_id();
  to_user_id_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_seek_rq.to_user_id)
}

// optional string to_user_nick = 4 [default = ""];
bool dialogue_seek_rq::has_to_user_nick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void dialogue_seek_rq::set_has_to_user_nick() {
  _has_bits_[0] |= 0x00000002u;
}
void dialogue_seek_rq::clear_has_to_user_nick() {
  _has_bits_[0] &= ~0x00000002u;
}
void dialogue_seek_rq::clear_to_user_nick() {
  to_user_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_user_nick();
}
const ::std::string& dialogue_seek_rq::to_user_nick() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_seek_rq.to_user_nick)
  return to_user_nick_.GetNoArena();
}
void dialogue_seek_rq::set_to_user_nick(const ::std::string& value) {
  set_has_to_user_nick();
  to_user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_seek_rq.to_user_nick)
}
#if LANG_CXX11
void dialogue_seek_rq::set_to_user_nick(::std::string&& value) {
  set_has_to_user_nick();
  to_user_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_com.dialogue_seek_rq.to_user_nick)
}
#endif
void dialogue_seek_rq::set_to_user_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_to_user_nick();
  to_user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_com.dialogue_seek_rq.to_user_nick)
}
void dialogue_seek_rq::set_to_user_nick(const char* value, size_t size) {
  set_has_to_user_nick();
  to_user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_com.dialogue_seek_rq.to_user_nick)
}
::std::string* dialogue_seek_rq::mutable_to_user_nick() {
  set_has_to_user_nick();
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_seek_rq.to_user_nick)
  return to_user_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dialogue_seek_rq::release_to_user_nick() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_seek_rq.to_user_nick)
  clear_has_to_user_nick();
  return to_user_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dialogue_seek_rq::set_allocated_to_user_nick(::std::string* to_user_nick) {
  if (to_user_nick != NULL) {
    set_has_to_user_nick();
  } else {
    clear_has_to_user_nick();
  }
  to_user_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_user_nick);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_seek_rq.to_user_nick)
}

// optional uint32 socket = 5 [default = 0];
bool dialogue_seek_rq::has_socket() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void dialogue_seek_rq::set_has_socket() {
  _has_bits_[0] |= 0x00000010u;
}
void dialogue_seek_rq::clear_has_socket() {
  _has_bits_[0] &= ~0x00000010u;
}
void dialogue_seek_rq::clear_socket() {
  socket_ = 0u;
  clear_has_socket();
}
::google::protobuf::uint32 dialogue_seek_rq::socket() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_seek_rq.socket)
  return socket_;
}
void dialogue_seek_rq::set_socket(::google::protobuf::uint32 value) {
  set_has_socket();
  socket_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_seek_rq.socket)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int dialogue_seek_rs::kErrorFieldNumber;
const int dialogue_seek_rs::kUserIdFieldNumber;
const int dialogue_seek_rs::kUserNickFieldNumber;
const int dialogue_seek_rs::kToUserIdFieldNumber;
const int dialogue_seek_rs::kToUserNickFieldNumber;
const int dialogue_seek_rs::kSeekStateFieldNumber;
const int dialogue_seek_rs::kSeekDescFieldNumber;
const int dialogue_seek_rs::kSocketFieldNumber;
const int dialogue_seek_rs::kToSocketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

dialogue_seek_rs::dialogue_seek_rs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fdialogue_5fcom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_dialogue_com.dialogue_seek_rs)
}
dialogue_seek_rs::dialogue_seek_rs(const dialogue_seek_rs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_nick()) {
    user_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_nick_);
  }
  to_user_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_to_user_nick()) {
    to_user_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_user_nick_);
  }
  seek_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_seek_desc()) {
    seek_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seek_desc_);
  }
  if (from.has_error()) {
    error_ = new ::b_error::info(*from.error_);
  } else {
    error_ = NULL;
  }
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&to_socket_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(to_socket_));
  // @@protoc_insertion_point(copy_constructor:c_dialogue_com.dialogue_seek_rs)
}

void dialogue_seek_rs::SharedCtor() {
  _cached_size_ = 0;
  user_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_user_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seek_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_, 0, reinterpret_cast<char*>(&to_socket_) -
    reinterpret_cast<char*>(&error_) + sizeof(to_socket_));
}

dialogue_seek_rs::~dialogue_seek_rs() {
  // @@protoc_insertion_point(destructor:c_dialogue_com.dialogue_seek_rs)
  SharedDtor();
}

void dialogue_seek_rs::SharedDtor() {
  user_nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_user_nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seek_desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete error_;
  }
}

void dialogue_seek_rs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dialogue_seek_rs::descriptor() {
  protobuf_c_5fdialogue_5fcom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fdialogue_5fcom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const dialogue_seek_rs& dialogue_seek_rs::default_instance() {
  protobuf_c_5fdialogue_5fcom_2eproto::InitDefaults();
  return *internal_default_instance();
}

dialogue_seek_rs* dialogue_seek_rs::New(::google::protobuf::Arena* arena) const {
  dialogue_seek_rs* n = new dialogue_seek_rs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void dialogue_seek_rs::Clear() {
// @@protoc_insertion_point(message_clear_start:c_dialogue_com.dialogue_seek_rs)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_user_nick()) {
      GOOGLE_DCHECK(!user_nick_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_nick_.UnsafeRawStringPointer())->clear();
    }
    if (has_to_user_nick()) {
      GOOGLE_DCHECK(!to_user_nick_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*to_user_nick_.UnsafeRawStringPointer())->clear();
    }
    if (has_seek_desc()) {
      GOOGLE_DCHECK(!seek_desc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*seek_desc_.UnsafeRawStringPointer())->clear();
    }
    if (has_error()) {
      GOOGLE_DCHECK(error_ != NULL);
      error_->::b_error::info::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&user_id_, 0, reinterpret_cast<char*>(&socket_) -
      reinterpret_cast<char*>(&user_id_) + sizeof(socket_));
  }
  to_socket_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool dialogue_seek_rs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_dialogue_com.dialogue_seek_rs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .b_error.info error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 user_id = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_nick = 3 [default = ""];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_nick().data(), this->user_nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "c_dialogue_com.dialogue_seek_rs.user_nick");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 to_user_id = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_to_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string to_user_nick = 5 [default = ""];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_user_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->to_user_nick().data(), this->to_user_nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "c_dialogue_com.dialogue_seek_rs.to_user_nick");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seek_state = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_seek_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seek_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes seek_desc = 7 [default = ""];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_seek_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 socket = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_socket();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &socket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 to_socket = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_to_socket();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_socket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_dialogue_com.dialogue_seek_rs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_dialogue_com.dialogue_seek_rs)
  return false;
#undef DO_
}

void dialogue_seek_rs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_dialogue_com.dialogue_seek_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .b_error.info error = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  // optional uint64 user_id = 2 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional string user_nick = 3 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_nick().data(), this->user_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_dialogue_com.dialogue_seek_rs.user_nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_nick(), output);
  }

  // optional uint64 to_user_id = 4 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->to_user_id(), output);
  }

  // optional string to_user_nick = 5 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_user_nick().data(), this->to_user_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_dialogue_com.dialogue_seek_rs.to_user_nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->to_user_nick(), output);
  }

  // optional uint32 seek_state = 6 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->seek_state(), output);
  }

  // optional bytes seek_desc = 7 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->seek_desc(), output);
  }

  // optional uint32 socket = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->socket(), output);
  }

  // optional uint32 to_socket = 9 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->to_socket(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_dialogue_com.dialogue_seek_rs)
}

::google::protobuf::uint8* dialogue_seek_rs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_dialogue_com.dialogue_seek_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .b_error.info error = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, deterministic, target);
  }

  // optional uint64 user_id = 2 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional string user_nick = 3 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_nick().data(), this->user_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_dialogue_com.dialogue_seek_rs.user_nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_nick(), target);
  }

  // optional uint64 to_user_id = 4 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->to_user_id(), target);
  }

  // optional string to_user_nick = 5 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_user_nick().data(), this->to_user_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_dialogue_com.dialogue_seek_rs.to_user_nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->to_user_nick(), target);
  }

  // optional uint32 seek_state = 6 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->seek_state(), target);
  }

  // optional bytes seek_desc = 7 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->seek_desc(), target);
  }

  // optional uint32 socket = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->socket(), target);
  }

  // optional uint32 to_socket = 9 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->to_socket(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_dialogue_com.dialogue_seek_rs)
  return target;
}

size_t dialogue_seek_rs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_dialogue_com.dialogue_seek_rs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string user_nick = 3 [default = ""];
    if (has_user_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_nick());
    }

    // optional string to_user_nick = 5 [default = ""];
    if (has_to_user_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_user_nick());
    }

    // optional bytes seek_desc = 7 [default = ""];
    if (has_seek_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->seek_desc());
    }

    // optional .b_error.info error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->error_);
    }

    // optional uint64 user_id = 2 [default = 0];
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 to_user_id = 4 [default = 0];
    if (has_to_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_user_id());
    }

    // optional uint32 seek_state = 6 [default = 0];
    if (has_seek_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seek_state());
    }

    // optional uint32 socket = 8 [default = 0];
    if (has_socket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->socket());
    }

  }
  // optional uint32 to_socket = 9 [default = 0];
  if (has_to_socket()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->to_socket());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dialogue_seek_rs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_dialogue_com.dialogue_seek_rs)
  GOOGLE_DCHECK_NE(&from, this);
  const dialogue_seek_rs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const dialogue_seek_rs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_dialogue_com.dialogue_seek_rs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_dialogue_com.dialogue_seek_rs)
    MergeFrom(*source);
  }
}

void dialogue_seek_rs::MergeFrom(const dialogue_seek_rs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_dialogue_com.dialogue_seek_rs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_user_nick();
      user_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_nick_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_to_user_nick();
      to_user_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_user_nick_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_seek_desc();
      seek_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seek_desc_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_error()->::b_error::info::MergeFrom(from.error());
    }
    if (cached_has_bits & 0x00000010u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      to_user_id_ = from.to_user_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      seek_state_ = from.seek_state_;
    }
    if (cached_has_bits & 0x00000080u) {
      socket_ = from.socket_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_to_socket(from.to_socket());
  }
}

void dialogue_seek_rs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_dialogue_com.dialogue_seek_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dialogue_seek_rs::CopyFrom(const dialogue_seek_rs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_dialogue_com.dialogue_seek_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dialogue_seek_rs::IsInitialized() const {
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void dialogue_seek_rs::Swap(dialogue_seek_rs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void dialogue_seek_rs::InternalSwap(dialogue_seek_rs* other) {
  user_nick_.Swap(&other->user_nick_);
  to_user_nick_.Swap(&other->to_user_nick_);
  seek_desc_.Swap(&other->seek_desc_);
  std::swap(error_, other->error_);
  std::swap(user_id_, other->user_id_);
  std::swap(to_user_id_, other->to_user_id_);
  std::swap(seek_state_, other->seek_state_);
  std::swap(socket_, other->socket_);
  std::swap(to_socket_, other->to_socket_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata dialogue_seek_rs::GetMetadata() const {
  protobuf_c_5fdialogue_5fcom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fdialogue_5fcom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// dialogue_seek_rs

// optional .b_error.info error = 1;
bool dialogue_seek_rs::has_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void dialogue_seek_rs::set_has_error() {
  _has_bits_[0] |= 0x00000008u;
}
void dialogue_seek_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000008u;
}
void dialogue_seek_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
const ::b_error::info& dialogue_seek_rs::error() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_seek_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
::b_error::info* dialogue_seek_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_seek_rs.error)
  return error_;
}
::b_error::info* dialogue_seek_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_seek_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
void dialogue_seek_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_seek_rs.error)
}

// optional uint64 user_id = 2 [default = 0];
bool dialogue_seek_rs::has_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void dialogue_seek_rs::set_has_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
void dialogue_seek_rs::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void dialogue_seek_rs::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::uint64 dialogue_seek_rs::user_id() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_seek_rs.user_id)
  return user_id_;
}
void dialogue_seek_rs::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_seek_rs.user_id)
}

// optional string user_nick = 3 [default = ""];
bool dialogue_seek_rs::has_user_nick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void dialogue_seek_rs::set_has_user_nick() {
  _has_bits_[0] |= 0x00000001u;
}
void dialogue_seek_rs::clear_has_user_nick() {
  _has_bits_[0] &= ~0x00000001u;
}
void dialogue_seek_rs::clear_user_nick() {
  user_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_nick();
}
const ::std::string& dialogue_seek_rs::user_nick() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_seek_rs.user_nick)
  return user_nick_.GetNoArena();
}
void dialogue_seek_rs::set_user_nick(const ::std::string& value) {
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_seek_rs.user_nick)
}
#if LANG_CXX11
void dialogue_seek_rs::set_user_nick(::std::string&& value) {
  set_has_user_nick();
  user_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_com.dialogue_seek_rs.user_nick)
}
#endif
void dialogue_seek_rs::set_user_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_com.dialogue_seek_rs.user_nick)
}
void dialogue_seek_rs::set_user_nick(const char* value, size_t size) {
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_com.dialogue_seek_rs.user_nick)
}
::std::string* dialogue_seek_rs::mutable_user_nick() {
  set_has_user_nick();
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_seek_rs.user_nick)
  return user_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dialogue_seek_rs::release_user_nick() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_seek_rs.user_nick)
  clear_has_user_nick();
  return user_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dialogue_seek_rs::set_allocated_user_nick(::std::string* user_nick) {
  if (user_nick != NULL) {
    set_has_user_nick();
  } else {
    clear_has_user_nick();
  }
  user_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_nick);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_seek_rs.user_nick)
}

// optional uint64 to_user_id = 4 [default = 0];
bool dialogue_seek_rs::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void dialogue_seek_rs::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000020u;
}
void dialogue_seek_rs::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void dialogue_seek_rs::clear_to_user_id() {
  to_user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_to_user_id();
}
::google::protobuf::uint64 dialogue_seek_rs::to_user_id() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_seek_rs.to_user_id)
  return to_user_id_;
}
void dialogue_seek_rs::set_to_user_id(::google::protobuf::uint64 value) {
  set_has_to_user_id();
  to_user_id_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_seek_rs.to_user_id)
}

// optional string to_user_nick = 5 [default = ""];
bool dialogue_seek_rs::has_to_user_nick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void dialogue_seek_rs::set_has_to_user_nick() {
  _has_bits_[0] |= 0x00000002u;
}
void dialogue_seek_rs::clear_has_to_user_nick() {
  _has_bits_[0] &= ~0x00000002u;
}
void dialogue_seek_rs::clear_to_user_nick() {
  to_user_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_user_nick();
}
const ::std::string& dialogue_seek_rs::to_user_nick() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_seek_rs.to_user_nick)
  return to_user_nick_.GetNoArena();
}
void dialogue_seek_rs::set_to_user_nick(const ::std::string& value) {
  set_has_to_user_nick();
  to_user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_seek_rs.to_user_nick)
}
#if LANG_CXX11
void dialogue_seek_rs::set_to_user_nick(::std::string&& value) {
  set_has_to_user_nick();
  to_user_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_com.dialogue_seek_rs.to_user_nick)
}
#endif
void dialogue_seek_rs::set_to_user_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_to_user_nick();
  to_user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_com.dialogue_seek_rs.to_user_nick)
}
void dialogue_seek_rs::set_to_user_nick(const char* value, size_t size) {
  set_has_to_user_nick();
  to_user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_com.dialogue_seek_rs.to_user_nick)
}
::std::string* dialogue_seek_rs::mutable_to_user_nick() {
  set_has_to_user_nick();
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_seek_rs.to_user_nick)
  return to_user_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dialogue_seek_rs::release_to_user_nick() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_seek_rs.to_user_nick)
  clear_has_to_user_nick();
  return to_user_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dialogue_seek_rs::set_allocated_to_user_nick(::std::string* to_user_nick) {
  if (to_user_nick != NULL) {
    set_has_to_user_nick();
  } else {
    clear_has_to_user_nick();
  }
  to_user_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_user_nick);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_seek_rs.to_user_nick)
}

// optional uint32 seek_state = 6 [default = 0];
bool dialogue_seek_rs::has_seek_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void dialogue_seek_rs::set_has_seek_state() {
  _has_bits_[0] |= 0x00000040u;
}
void dialogue_seek_rs::clear_has_seek_state() {
  _has_bits_[0] &= ~0x00000040u;
}
void dialogue_seek_rs::clear_seek_state() {
  seek_state_ = 0u;
  clear_has_seek_state();
}
::google::protobuf::uint32 dialogue_seek_rs::seek_state() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_seek_rs.seek_state)
  return seek_state_;
}
void dialogue_seek_rs::set_seek_state(::google::protobuf::uint32 value) {
  set_has_seek_state();
  seek_state_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_seek_rs.seek_state)
}

// optional bytes seek_desc = 7 [default = ""];
bool dialogue_seek_rs::has_seek_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void dialogue_seek_rs::set_has_seek_desc() {
  _has_bits_[0] |= 0x00000004u;
}
void dialogue_seek_rs::clear_has_seek_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
void dialogue_seek_rs::clear_seek_desc() {
  seek_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_seek_desc();
}
const ::std::string& dialogue_seek_rs::seek_desc() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_seek_rs.seek_desc)
  return seek_desc_.GetNoArena();
}
void dialogue_seek_rs::set_seek_desc(const ::std::string& value) {
  set_has_seek_desc();
  seek_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_seek_rs.seek_desc)
}
#if LANG_CXX11
void dialogue_seek_rs::set_seek_desc(::std::string&& value) {
  set_has_seek_desc();
  seek_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_com.dialogue_seek_rs.seek_desc)
}
#endif
void dialogue_seek_rs::set_seek_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_seek_desc();
  seek_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_com.dialogue_seek_rs.seek_desc)
}
void dialogue_seek_rs::set_seek_desc(const void* value, size_t size) {
  set_has_seek_desc();
  seek_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_com.dialogue_seek_rs.seek_desc)
}
::std::string* dialogue_seek_rs::mutable_seek_desc() {
  set_has_seek_desc();
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_seek_rs.seek_desc)
  return seek_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dialogue_seek_rs::release_seek_desc() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_seek_rs.seek_desc)
  clear_has_seek_desc();
  return seek_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dialogue_seek_rs::set_allocated_seek_desc(::std::string* seek_desc) {
  if (seek_desc != NULL) {
    set_has_seek_desc();
  } else {
    clear_has_seek_desc();
  }
  seek_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), seek_desc);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_seek_rs.seek_desc)
}

// optional uint32 socket = 8 [default = 0];
bool dialogue_seek_rs::has_socket() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void dialogue_seek_rs::set_has_socket() {
  _has_bits_[0] |= 0x00000080u;
}
void dialogue_seek_rs::clear_has_socket() {
  _has_bits_[0] &= ~0x00000080u;
}
void dialogue_seek_rs::clear_socket() {
  socket_ = 0u;
  clear_has_socket();
}
::google::protobuf::uint32 dialogue_seek_rs::socket() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_seek_rs.socket)
  return socket_;
}
void dialogue_seek_rs::set_socket(::google::protobuf::uint32 value) {
  set_has_socket();
  socket_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_seek_rs.socket)
}

// optional uint32 to_socket = 9 [default = 0];
bool dialogue_seek_rs::has_to_socket() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void dialogue_seek_rs::set_has_to_socket() {
  _has_bits_[0] |= 0x00000100u;
}
void dialogue_seek_rs::clear_has_to_socket() {
  _has_bits_[0] &= ~0x00000100u;
}
void dialogue_seek_rs::clear_to_socket() {
  to_socket_ = 0u;
  clear_has_to_socket();
}
::google::protobuf::uint32 dialogue_seek_rs::to_socket() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_seek_rs.to_socket)
  return to_socket_;
}
void dialogue_seek_rs::set_to_socket(::google::protobuf::uint32 value) {
  set_has_to_socket();
  to_socket_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_seek_rs.to_socket)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int dialogue_talk_rq::kUserIdFieldNumber;
const int dialogue_talk_rq::kUserNickFieldNumber;
const int dialogue_talk_rq::kToUserIdFieldNumber;
const int dialogue_talk_rq::kToUserNickFieldNumber;
const int dialogue_talk_rq::kTalkingFieldNumber;
const int dialogue_talk_rq::kSocketFieldNumber;
const int dialogue_talk_rq::kToSocketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

dialogue_talk_rq::dialogue_talk_rq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fdialogue_5fcom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_dialogue_com.dialogue_talk_rq)
}
dialogue_talk_rq::dialogue_talk_rq(const dialogue_talk_rq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_nick()) {
    user_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_nick_);
  }
  to_user_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_to_user_nick()) {
    to_user_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_user_nick_);
  }
  talking_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_talking()) {
    talking_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.talking_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&to_socket_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(to_socket_));
  // @@protoc_insertion_point(copy_constructor:c_dialogue_com.dialogue_talk_rq)
}

void dialogue_talk_rq::SharedCtor() {
  _cached_size_ = 0;
  user_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_user_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  talking_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&to_socket_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(to_socket_));
}

dialogue_talk_rq::~dialogue_talk_rq() {
  // @@protoc_insertion_point(destructor:c_dialogue_com.dialogue_talk_rq)
  SharedDtor();
}

void dialogue_talk_rq::SharedDtor() {
  user_nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_user_nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  talking_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void dialogue_talk_rq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dialogue_talk_rq::descriptor() {
  protobuf_c_5fdialogue_5fcom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fdialogue_5fcom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const dialogue_talk_rq& dialogue_talk_rq::default_instance() {
  protobuf_c_5fdialogue_5fcom_2eproto::InitDefaults();
  return *internal_default_instance();
}

dialogue_talk_rq* dialogue_talk_rq::New(::google::protobuf::Arena* arena) const {
  dialogue_talk_rq* n = new dialogue_talk_rq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void dialogue_talk_rq::Clear() {
// @@protoc_insertion_point(message_clear_start:c_dialogue_com.dialogue_talk_rq)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_user_nick()) {
      GOOGLE_DCHECK(!user_nick_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_nick_.UnsafeRawStringPointer())->clear();
    }
    if (has_to_user_nick()) {
      GOOGLE_DCHECK(!to_user_nick_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*to_user_nick_.UnsafeRawStringPointer())->clear();
    }
    if (has_talking()) {
      GOOGLE_DCHECK(!talking_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*talking_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 120u) {
    ::memset(&user_id_, 0, reinterpret_cast<char*>(&to_socket_) -
      reinterpret_cast<char*>(&user_id_) + sizeof(to_socket_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool dialogue_talk_rq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_dialogue_com.dialogue_talk_rq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_nick = 2 [default = ""];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_nick().data(), this->user_nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "c_dialogue_com.dialogue_talk_rq.user_nick");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 to_user_id = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_to_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string to_user_nick = 4 [default = ""];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_user_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->to_user_nick().data(), this->to_user_nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "c_dialogue_com.dialogue_talk_rq.to_user_nick");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes talking = 5 [default = ""];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_talking()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 socket = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_socket();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &socket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 to_socket = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_to_socket();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_socket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_dialogue_com.dialogue_talk_rq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_dialogue_com.dialogue_talk_rq)
  return false;
#undef DO_
}

void dialogue_talk_rq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_dialogue_com.dialogue_talk_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 user_id = 1 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional string user_nick = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_nick().data(), this->user_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_dialogue_com.dialogue_talk_rq.user_nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_nick(), output);
  }

  // optional uint64 to_user_id = 3 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->to_user_id(), output);
  }

  // optional string to_user_nick = 4 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_user_nick().data(), this->to_user_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_dialogue_com.dialogue_talk_rq.to_user_nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->to_user_nick(), output);
  }

  // optional bytes talking = 5 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->talking(), output);
  }

  // optional uint32 socket = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->socket(), output);
  }

  // optional uint32 to_socket = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->to_socket(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_dialogue_com.dialogue_talk_rq)
}

::google::protobuf::uint8* dialogue_talk_rq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_dialogue_com.dialogue_talk_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 user_id = 1 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional string user_nick = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_nick().data(), this->user_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_dialogue_com.dialogue_talk_rq.user_nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_nick(), target);
  }

  // optional uint64 to_user_id = 3 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->to_user_id(), target);
  }

  // optional string to_user_nick = 4 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_user_nick().data(), this->to_user_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_dialogue_com.dialogue_talk_rq.to_user_nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->to_user_nick(), target);
  }

  // optional bytes talking = 5 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->talking(), target);
  }

  // optional uint32 socket = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->socket(), target);
  }

  // optional uint32 to_socket = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->to_socket(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_dialogue_com.dialogue_talk_rq)
  return target;
}

size_t dialogue_talk_rq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_dialogue_com.dialogue_talk_rq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string user_nick = 2 [default = ""];
    if (has_user_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_nick());
    }

    // optional string to_user_nick = 4 [default = ""];
    if (has_to_user_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_user_nick());
    }

    // optional bytes talking = 5 [default = ""];
    if (has_talking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->talking());
    }

    // optional uint64 user_id = 1 [default = 0];
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 to_user_id = 3 [default = 0];
    if (has_to_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_user_id());
    }

    // optional uint32 socket = 6 [default = 0];
    if (has_socket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->socket());
    }

    // optional uint32 to_socket = 7 [default = 0];
    if (has_to_socket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to_socket());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dialogue_talk_rq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_dialogue_com.dialogue_talk_rq)
  GOOGLE_DCHECK_NE(&from, this);
  const dialogue_talk_rq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const dialogue_talk_rq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_dialogue_com.dialogue_talk_rq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_dialogue_com.dialogue_talk_rq)
    MergeFrom(*source);
  }
}

void dialogue_talk_rq::MergeFrom(const dialogue_talk_rq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_dialogue_com.dialogue_talk_rq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_user_nick();
      user_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_nick_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_to_user_nick();
      to_user_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_user_nick_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_talking();
      talking_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.talking_);
    }
    if (cached_has_bits & 0x00000008u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      to_user_id_ = from.to_user_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      socket_ = from.socket_;
    }
    if (cached_has_bits & 0x00000040u) {
      to_socket_ = from.to_socket_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void dialogue_talk_rq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_dialogue_com.dialogue_talk_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dialogue_talk_rq::CopyFrom(const dialogue_talk_rq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_dialogue_com.dialogue_talk_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dialogue_talk_rq::IsInitialized() const {
  return true;
}

void dialogue_talk_rq::Swap(dialogue_talk_rq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void dialogue_talk_rq::InternalSwap(dialogue_talk_rq* other) {
  user_nick_.Swap(&other->user_nick_);
  to_user_nick_.Swap(&other->to_user_nick_);
  talking_.Swap(&other->talking_);
  std::swap(user_id_, other->user_id_);
  std::swap(to_user_id_, other->to_user_id_);
  std::swap(socket_, other->socket_);
  std::swap(to_socket_, other->to_socket_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata dialogue_talk_rq::GetMetadata() const {
  protobuf_c_5fdialogue_5fcom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fdialogue_5fcom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// dialogue_talk_rq

// optional uint64 user_id = 1 [default = 0];
bool dialogue_talk_rq::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void dialogue_talk_rq::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
void dialogue_talk_rq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void dialogue_talk_rq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::uint64 dialogue_talk_rq::user_id() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_rq.user_id)
  return user_id_;
}
void dialogue_talk_rq::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_rq.user_id)
}

// optional string user_nick = 2 [default = ""];
bool dialogue_talk_rq::has_user_nick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void dialogue_talk_rq::set_has_user_nick() {
  _has_bits_[0] |= 0x00000001u;
}
void dialogue_talk_rq::clear_has_user_nick() {
  _has_bits_[0] &= ~0x00000001u;
}
void dialogue_talk_rq::clear_user_nick() {
  user_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_nick();
}
const ::std::string& dialogue_talk_rq::user_nick() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_rq.user_nick)
  return user_nick_.GetNoArena();
}
void dialogue_talk_rq::set_user_nick(const ::std::string& value) {
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_rq.user_nick)
}
#if LANG_CXX11
void dialogue_talk_rq::set_user_nick(::std::string&& value) {
  set_has_user_nick();
  user_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_com.dialogue_talk_rq.user_nick)
}
#endif
void dialogue_talk_rq::set_user_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_com.dialogue_talk_rq.user_nick)
}
void dialogue_talk_rq::set_user_nick(const char* value, size_t size) {
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_com.dialogue_talk_rq.user_nick)
}
::std::string* dialogue_talk_rq::mutable_user_nick() {
  set_has_user_nick();
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_talk_rq.user_nick)
  return user_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dialogue_talk_rq::release_user_nick() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_talk_rq.user_nick)
  clear_has_user_nick();
  return user_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dialogue_talk_rq::set_allocated_user_nick(::std::string* user_nick) {
  if (user_nick != NULL) {
    set_has_user_nick();
  } else {
    clear_has_user_nick();
  }
  user_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_nick);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_talk_rq.user_nick)
}

// optional uint64 to_user_id = 3 [default = 0];
bool dialogue_talk_rq::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void dialogue_talk_rq::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
void dialogue_talk_rq::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void dialogue_talk_rq::clear_to_user_id() {
  to_user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_to_user_id();
}
::google::protobuf::uint64 dialogue_talk_rq::to_user_id() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_rq.to_user_id)
  return to_user_id_;
}
void dialogue_talk_rq::set_to_user_id(::google::protobuf::uint64 value) {
  set_has_to_user_id();
  to_user_id_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_rq.to_user_id)
}

// optional string to_user_nick = 4 [default = ""];
bool dialogue_talk_rq::has_to_user_nick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void dialogue_talk_rq::set_has_to_user_nick() {
  _has_bits_[0] |= 0x00000002u;
}
void dialogue_talk_rq::clear_has_to_user_nick() {
  _has_bits_[0] &= ~0x00000002u;
}
void dialogue_talk_rq::clear_to_user_nick() {
  to_user_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_user_nick();
}
const ::std::string& dialogue_talk_rq::to_user_nick() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_rq.to_user_nick)
  return to_user_nick_.GetNoArena();
}
void dialogue_talk_rq::set_to_user_nick(const ::std::string& value) {
  set_has_to_user_nick();
  to_user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_rq.to_user_nick)
}
#if LANG_CXX11
void dialogue_talk_rq::set_to_user_nick(::std::string&& value) {
  set_has_to_user_nick();
  to_user_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_com.dialogue_talk_rq.to_user_nick)
}
#endif
void dialogue_talk_rq::set_to_user_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_to_user_nick();
  to_user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_com.dialogue_talk_rq.to_user_nick)
}
void dialogue_talk_rq::set_to_user_nick(const char* value, size_t size) {
  set_has_to_user_nick();
  to_user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_com.dialogue_talk_rq.to_user_nick)
}
::std::string* dialogue_talk_rq::mutable_to_user_nick() {
  set_has_to_user_nick();
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_talk_rq.to_user_nick)
  return to_user_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dialogue_talk_rq::release_to_user_nick() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_talk_rq.to_user_nick)
  clear_has_to_user_nick();
  return to_user_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dialogue_talk_rq::set_allocated_to_user_nick(::std::string* to_user_nick) {
  if (to_user_nick != NULL) {
    set_has_to_user_nick();
  } else {
    clear_has_to_user_nick();
  }
  to_user_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_user_nick);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_talk_rq.to_user_nick)
}

// optional bytes talking = 5 [default = ""];
bool dialogue_talk_rq::has_talking() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void dialogue_talk_rq::set_has_talking() {
  _has_bits_[0] |= 0x00000004u;
}
void dialogue_talk_rq::clear_has_talking() {
  _has_bits_[0] &= ~0x00000004u;
}
void dialogue_talk_rq::clear_talking() {
  talking_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_talking();
}
const ::std::string& dialogue_talk_rq::talking() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_rq.talking)
  return talking_.GetNoArena();
}
void dialogue_talk_rq::set_talking(const ::std::string& value) {
  set_has_talking();
  talking_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_rq.talking)
}
#if LANG_CXX11
void dialogue_talk_rq::set_talking(::std::string&& value) {
  set_has_talking();
  talking_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_com.dialogue_talk_rq.talking)
}
#endif
void dialogue_talk_rq::set_talking(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_talking();
  talking_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_com.dialogue_talk_rq.talking)
}
void dialogue_talk_rq::set_talking(const void* value, size_t size) {
  set_has_talking();
  talking_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_com.dialogue_talk_rq.talking)
}
::std::string* dialogue_talk_rq::mutable_talking() {
  set_has_talking();
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_talk_rq.talking)
  return talking_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dialogue_talk_rq::release_talking() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_talk_rq.talking)
  clear_has_talking();
  return talking_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dialogue_talk_rq::set_allocated_talking(::std::string* talking) {
  if (talking != NULL) {
    set_has_talking();
  } else {
    clear_has_talking();
  }
  talking_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), talking);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_talk_rq.talking)
}

// optional uint32 socket = 6 [default = 0];
bool dialogue_talk_rq::has_socket() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void dialogue_talk_rq::set_has_socket() {
  _has_bits_[0] |= 0x00000020u;
}
void dialogue_talk_rq::clear_has_socket() {
  _has_bits_[0] &= ~0x00000020u;
}
void dialogue_talk_rq::clear_socket() {
  socket_ = 0u;
  clear_has_socket();
}
::google::protobuf::uint32 dialogue_talk_rq::socket() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_rq.socket)
  return socket_;
}
void dialogue_talk_rq::set_socket(::google::protobuf::uint32 value) {
  set_has_socket();
  socket_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_rq.socket)
}

// optional uint32 to_socket = 7 [default = 0];
bool dialogue_talk_rq::has_to_socket() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void dialogue_talk_rq::set_has_to_socket() {
  _has_bits_[0] |= 0x00000040u;
}
void dialogue_talk_rq::clear_has_to_socket() {
  _has_bits_[0] &= ~0x00000040u;
}
void dialogue_talk_rq::clear_to_socket() {
  to_socket_ = 0u;
  clear_has_to_socket();
}
::google::protobuf::uint32 dialogue_talk_rq::to_socket() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_rq.to_socket)
  return to_socket_;
}
void dialogue_talk_rq::set_to_socket(::google::protobuf::uint32 value) {
  set_has_to_socket();
  to_socket_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_rq.to_socket)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int dialogue_talk_rs::kErrorFieldNumber;
const int dialogue_talk_rs::kUserIdFieldNumber;
const int dialogue_talk_rs::kUserNickFieldNumber;
const int dialogue_talk_rs::kTalkRsStateFieldNumber;
const int dialogue_talk_rs::kTalkRsDescFieldNumber;
const int dialogue_talk_rs::kSocketFieldNumber;
const int dialogue_talk_rs::kToSocketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

dialogue_talk_rs::dialogue_talk_rs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fdialogue_5fcom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_dialogue_com.dialogue_talk_rs)
}
dialogue_talk_rs::dialogue_talk_rs(const dialogue_talk_rs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_nick()) {
    user_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_nick_);
  }
  talk_rs_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_talk_rs_desc()) {
    talk_rs_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.talk_rs_desc_);
  }
  if (from.has_error()) {
    error_ = new ::b_error::info(*from.error_);
  } else {
    error_ = NULL;
  }
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&to_socket_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(to_socket_));
  // @@protoc_insertion_point(copy_constructor:c_dialogue_com.dialogue_talk_rs)
}

void dialogue_talk_rs::SharedCtor() {
  _cached_size_ = 0;
  user_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  talk_rs_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_, 0, reinterpret_cast<char*>(&to_socket_) -
    reinterpret_cast<char*>(&error_) + sizeof(to_socket_));
}

dialogue_talk_rs::~dialogue_talk_rs() {
  // @@protoc_insertion_point(destructor:c_dialogue_com.dialogue_talk_rs)
  SharedDtor();
}

void dialogue_talk_rs::SharedDtor() {
  user_nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  talk_rs_desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete error_;
  }
}

void dialogue_talk_rs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dialogue_talk_rs::descriptor() {
  protobuf_c_5fdialogue_5fcom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fdialogue_5fcom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const dialogue_talk_rs& dialogue_talk_rs::default_instance() {
  protobuf_c_5fdialogue_5fcom_2eproto::InitDefaults();
  return *internal_default_instance();
}

dialogue_talk_rs* dialogue_talk_rs::New(::google::protobuf::Arena* arena) const {
  dialogue_talk_rs* n = new dialogue_talk_rs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void dialogue_talk_rs::Clear() {
// @@protoc_insertion_point(message_clear_start:c_dialogue_com.dialogue_talk_rs)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_user_nick()) {
      GOOGLE_DCHECK(!user_nick_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_nick_.UnsafeRawStringPointer())->clear();
    }
    if (has_talk_rs_desc()) {
      GOOGLE_DCHECK(!talk_rs_desc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*talk_rs_desc_.UnsafeRawStringPointer())->clear();
    }
    if (has_error()) {
      GOOGLE_DCHECK(error_ != NULL);
      error_->::b_error::info::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 120u) {
    ::memset(&user_id_, 0, reinterpret_cast<char*>(&to_socket_) -
      reinterpret_cast<char*>(&user_id_) + sizeof(to_socket_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool dialogue_talk_rs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_dialogue_com.dialogue_talk_rs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .b_error.info error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 user_id = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_nick = 3 [default = ""];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_nick().data(), this->user_nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "c_dialogue_com.dialogue_talk_rs.user_nick");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 talk_rs_state = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_talk_rs_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &talk_rs_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes talk_rs_desc = 5 [default = ""];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_talk_rs_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 socket = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_socket();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &socket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 to_socket = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_to_socket();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_socket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_dialogue_com.dialogue_talk_rs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_dialogue_com.dialogue_talk_rs)
  return false;
#undef DO_
}

void dialogue_talk_rs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_dialogue_com.dialogue_talk_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .b_error.info error = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  // optional uint64 user_id = 2 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional string user_nick = 3 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_nick().data(), this->user_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_dialogue_com.dialogue_talk_rs.user_nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_nick(), output);
  }

  // optional uint32 talk_rs_state = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->talk_rs_state(), output);
  }

  // optional bytes talk_rs_desc = 5 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->talk_rs_desc(), output);
  }

  // optional uint32 socket = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->socket(), output);
  }

  // optional uint32 to_socket = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->to_socket(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_dialogue_com.dialogue_talk_rs)
}

::google::protobuf::uint8* dialogue_talk_rs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_dialogue_com.dialogue_talk_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .b_error.info error = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, deterministic, target);
  }

  // optional uint64 user_id = 2 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional string user_nick = 3 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_nick().data(), this->user_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_dialogue_com.dialogue_talk_rs.user_nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_nick(), target);
  }

  // optional uint32 talk_rs_state = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->talk_rs_state(), target);
  }

  // optional bytes talk_rs_desc = 5 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->talk_rs_desc(), target);
  }

  // optional uint32 socket = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->socket(), target);
  }

  // optional uint32 to_socket = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->to_socket(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_dialogue_com.dialogue_talk_rs)
  return target;
}

size_t dialogue_talk_rs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_dialogue_com.dialogue_talk_rs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string user_nick = 3 [default = ""];
    if (has_user_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_nick());
    }

    // optional bytes talk_rs_desc = 5 [default = ""];
    if (has_talk_rs_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->talk_rs_desc());
    }

    // optional .b_error.info error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->error_);
    }

    // optional uint64 user_id = 2 [default = 0];
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint32 talk_rs_state = 4 [default = 0];
    if (has_talk_rs_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->talk_rs_state());
    }

    // optional uint32 socket = 6 [default = 0];
    if (has_socket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->socket());
    }

    // optional uint32 to_socket = 7 [default = 0];
    if (has_to_socket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to_socket());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dialogue_talk_rs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_dialogue_com.dialogue_talk_rs)
  GOOGLE_DCHECK_NE(&from, this);
  const dialogue_talk_rs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const dialogue_talk_rs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_dialogue_com.dialogue_talk_rs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_dialogue_com.dialogue_talk_rs)
    MergeFrom(*source);
  }
}

void dialogue_talk_rs::MergeFrom(const dialogue_talk_rs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_dialogue_com.dialogue_talk_rs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_user_nick();
      user_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_nick_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_talk_rs_desc();
      talk_rs_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.talk_rs_desc_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_error()->::b_error::info::MergeFrom(from.error());
    }
    if (cached_has_bits & 0x00000008u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      talk_rs_state_ = from.talk_rs_state_;
    }
    if (cached_has_bits & 0x00000020u) {
      socket_ = from.socket_;
    }
    if (cached_has_bits & 0x00000040u) {
      to_socket_ = from.to_socket_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void dialogue_talk_rs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_dialogue_com.dialogue_talk_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dialogue_talk_rs::CopyFrom(const dialogue_talk_rs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_dialogue_com.dialogue_talk_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dialogue_talk_rs::IsInitialized() const {
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void dialogue_talk_rs::Swap(dialogue_talk_rs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void dialogue_talk_rs::InternalSwap(dialogue_talk_rs* other) {
  user_nick_.Swap(&other->user_nick_);
  talk_rs_desc_.Swap(&other->talk_rs_desc_);
  std::swap(error_, other->error_);
  std::swap(user_id_, other->user_id_);
  std::swap(talk_rs_state_, other->talk_rs_state_);
  std::swap(socket_, other->socket_);
  std::swap(to_socket_, other->to_socket_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata dialogue_talk_rs::GetMetadata() const {
  protobuf_c_5fdialogue_5fcom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fdialogue_5fcom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// dialogue_talk_rs

// optional .b_error.info error = 1;
bool dialogue_talk_rs::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void dialogue_talk_rs::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
void dialogue_talk_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
void dialogue_talk_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
const ::b_error::info& dialogue_talk_rs::error() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
::b_error::info* dialogue_talk_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_talk_rs.error)
  return error_;
}
::b_error::info* dialogue_talk_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_talk_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
void dialogue_talk_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_talk_rs.error)
}

// optional uint64 user_id = 2 [default = 0];
bool dialogue_talk_rs::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void dialogue_talk_rs::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
void dialogue_talk_rs::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void dialogue_talk_rs::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::uint64 dialogue_talk_rs::user_id() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_rs.user_id)
  return user_id_;
}
void dialogue_talk_rs::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_rs.user_id)
}

// optional string user_nick = 3 [default = ""];
bool dialogue_talk_rs::has_user_nick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void dialogue_talk_rs::set_has_user_nick() {
  _has_bits_[0] |= 0x00000001u;
}
void dialogue_talk_rs::clear_has_user_nick() {
  _has_bits_[0] &= ~0x00000001u;
}
void dialogue_talk_rs::clear_user_nick() {
  user_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_nick();
}
const ::std::string& dialogue_talk_rs::user_nick() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_rs.user_nick)
  return user_nick_.GetNoArena();
}
void dialogue_talk_rs::set_user_nick(const ::std::string& value) {
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_rs.user_nick)
}
#if LANG_CXX11
void dialogue_talk_rs::set_user_nick(::std::string&& value) {
  set_has_user_nick();
  user_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_com.dialogue_talk_rs.user_nick)
}
#endif
void dialogue_talk_rs::set_user_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_com.dialogue_talk_rs.user_nick)
}
void dialogue_talk_rs::set_user_nick(const char* value, size_t size) {
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_com.dialogue_talk_rs.user_nick)
}
::std::string* dialogue_talk_rs::mutable_user_nick() {
  set_has_user_nick();
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_talk_rs.user_nick)
  return user_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dialogue_talk_rs::release_user_nick() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_talk_rs.user_nick)
  clear_has_user_nick();
  return user_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dialogue_talk_rs::set_allocated_user_nick(::std::string* user_nick) {
  if (user_nick != NULL) {
    set_has_user_nick();
  } else {
    clear_has_user_nick();
  }
  user_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_nick);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_talk_rs.user_nick)
}

// optional uint32 talk_rs_state = 4 [default = 0];
bool dialogue_talk_rs::has_talk_rs_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void dialogue_talk_rs::set_has_talk_rs_state() {
  _has_bits_[0] |= 0x00000010u;
}
void dialogue_talk_rs::clear_has_talk_rs_state() {
  _has_bits_[0] &= ~0x00000010u;
}
void dialogue_talk_rs::clear_talk_rs_state() {
  talk_rs_state_ = 0u;
  clear_has_talk_rs_state();
}
::google::protobuf::uint32 dialogue_talk_rs::talk_rs_state() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_rs.talk_rs_state)
  return talk_rs_state_;
}
void dialogue_talk_rs::set_talk_rs_state(::google::protobuf::uint32 value) {
  set_has_talk_rs_state();
  talk_rs_state_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_rs.talk_rs_state)
}

// optional bytes talk_rs_desc = 5 [default = ""];
bool dialogue_talk_rs::has_talk_rs_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void dialogue_talk_rs::set_has_talk_rs_desc() {
  _has_bits_[0] |= 0x00000002u;
}
void dialogue_talk_rs::clear_has_talk_rs_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
void dialogue_talk_rs::clear_talk_rs_desc() {
  talk_rs_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_talk_rs_desc();
}
const ::std::string& dialogue_talk_rs::talk_rs_desc() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_rs.talk_rs_desc)
  return talk_rs_desc_.GetNoArena();
}
void dialogue_talk_rs::set_talk_rs_desc(const ::std::string& value) {
  set_has_talk_rs_desc();
  talk_rs_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_rs.talk_rs_desc)
}
#if LANG_CXX11
void dialogue_talk_rs::set_talk_rs_desc(::std::string&& value) {
  set_has_talk_rs_desc();
  talk_rs_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_com.dialogue_talk_rs.talk_rs_desc)
}
#endif
void dialogue_talk_rs::set_talk_rs_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_talk_rs_desc();
  talk_rs_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_com.dialogue_talk_rs.talk_rs_desc)
}
void dialogue_talk_rs::set_talk_rs_desc(const void* value, size_t size) {
  set_has_talk_rs_desc();
  talk_rs_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_com.dialogue_talk_rs.talk_rs_desc)
}
::std::string* dialogue_talk_rs::mutable_talk_rs_desc() {
  set_has_talk_rs_desc();
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_talk_rs.talk_rs_desc)
  return talk_rs_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dialogue_talk_rs::release_talk_rs_desc() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_talk_rs.talk_rs_desc)
  clear_has_talk_rs_desc();
  return talk_rs_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dialogue_talk_rs::set_allocated_talk_rs_desc(::std::string* talk_rs_desc) {
  if (talk_rs_desc != NULL) {
    set_has_talk_rs_desc();
  } else {
    clear_has_talk_rs_desc();
  }
  talk_rs_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), talk_rs_desc);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_talk_rs.talk_rs_desc)
}

// optional uint32 socket = 6 [default = 0];
bool dialogue_talk_rs::has_socket() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void dialogue_talk_rs::set_has_socket() {
  _has_bits_[0] |= 0x00000020u;
}
void dialogue_talk_rs::clear_has_socket() {
  _has_bits_[0] &= ~0x00000020u;
}
void dialogue_talk_rs::clear_socket() {
  socket_ = 0u;
  clear_has_socket();
}
::google::protobuf::uint32 dialogue_talk_rs::socket() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_rs.socket)
  return socket_;
}
void dialogue_talk_rs::set_socket(::google::protobuf::uint32 value) {
  set_has_socket();
  socket_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_rs.socket)
}

// optional uint32 to_socket = 7 [default = 0];
bool dialogue_talk_rs::has_to_socket() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void dialogue_talk_rs::set_has_to_socket() {
  _has_bits_[0] |= 0x00000040u;
}
void dialogue_talk_rs::clear_has_to_socket() {
  _has_bits_[0] &= ~0x00000040u;
}
void dialogue_talk_rs::clear_to_socket() {
  to_socket_ = 0u;
  clear_has_to_socket();
}
::google::protobuf::uint32 dialogue_talk_rs::to_socket() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_rs.to_socket)
  return to_socket_;
}
void dialogue_talk_rs::set_to_socket(::google::protobuf::uint32 value) {
  set_has_to_socket();
  to_socket_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_rs.to_socket)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int dialogue_talk_nt::kErrorFieldNumber;
const int dialogue_talk_nt::kUserIdFieldNumber;
const int dialogue_talk_nt::kUserNickFieldNumber;
const int dialogue_talk_nt::kToUserIdFieldNumber;
const int dialogue_talk_nt::kToUserNickFieldNumber;
const int dialogue_talk_nt::kTalkingFieldNumber;
const int dialogue_talk_nt::kTalkNtStateFieldNumber;
const int dialogue_talk_nt::kTalkNtDescFieldNumber;
const int dialogue_talk_nt::kSocketFieldNumber;
const int dialogue_talk_nt::kToSocketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

dialogue_talk_nt::dialogue_talk_nt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fdialogue_5fcom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_dialogue_com.dialogue_talk_nt)
}
dialogue_talk_nt::dialogue_talk_nt(const dialogue_talk_nt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_nick()) {
    user_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_nick_);
  }
  to_user_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_to_user_nick()) {
    to_user_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_user_nick_);
  }
  talking_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_talking()) {
    talking_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.talking_);
  }
  talk_nt_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_talk_nt_desc()) {
    talk_nt_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.talk_nt_desc_);
  }
  if (from.has_error()) {
    error_ = new ::b_error::info(*from.error_);
  } else {
    error_ = NULL;
  }
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&to_socket_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(to_socket_));
  // @@protoc_insertion_point(copy_constructor:c_dialogue_com.dialogue_talk_nt)
}

void dialogue_talk_nt::SharedCtor() {
  _cached_size_ = 0;
  user_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_user_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  talking_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  talk_nt_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_, 0, reinterpret_cast<char*>(&to_socket_) -
    reinterpret_cast<char*>(&error_) + sizeof(to_socket_));
}

dialogue_talk_nt::~dialogue_talk_nt() {
  // @@protoc_insertion_point(destructor:c_dialogue_com.dialogue_talk_nt)
  SharedDtor();
}

void dialogue_talk_nt::SharedDtor() {
  user_nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_user_nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  talking_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  talk_nt_desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete error_;
  }
}

void dialogue_talk_nt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dialogue_talk_nt::descriptor() {
  protobuf_c_5fdialogue_5fcom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fdialogue_5fcom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const dialogue_talk_nt& dialogue_talk_nt::default_instance() {
  protobuf_c_5fdialogue_5fcom_2eproto::InitDefaults();
  return *internal_default_instance();
}

dialogue_talk_nt* dialogue_talk_nt::New(::google::protobuf::Arena* arena) const {
  dialogue_talk_nt* n = new dialogue_talk_nt;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void dialogue_talk_nt::Clear() {
// @@protoc_insertion_point(message_clear_start:c_dialogue_com.dialogue_talk_nt)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_user_nick()) {
      GOOGLE_DCHECK(!user_nick_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_nick_.UnsafeRawStringPointer())->clear();
    }
    if (has_to_user_nick()) {
      GOOGLE_DCHECK(!to_user_nick_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*to_user_nick_.UnsafeRawStringPointer())->clear();
    }
    if (has_talking()) {
      GOOGLE_DCHECK(!talking_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*talking_.UnsafeRawStringPointer())->clear();
    }
    if (has_talk_nt_desc()) {
      GOOGLE_DCHECK(!talk_nt_desc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*talk_nt_desc_.UnsafeRawStringPointer())->clear();
    }
    if (has_error()) {
      GOOGLE_DCHECK(error_ != NULL);
      error_->::b_error::info::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 224u) {
    ::memset(&user_id_, 0, reinterpret_cast<char*>(&talk_nt_state_) -
      reinterpret_cast<char*>(&user_id_) + sizeof(talk_nt_state_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&socket_, 0, reinterpret_cast<char*>(&to_socket_) -
      reinterpret_cast<char*>(&socket_) + sizeof(to_socket_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool dialogue_talk_nt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_dialogue_com.dialogue_talk_nt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .b_error.info error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 user_id = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_nick = 3 [default = ""];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_nick().data(), this->user_nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "c_dialogue_com.dialogue_talk_nt.user_nick");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 to_user_id = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_to_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string to_user_nick = 5 [default = ""];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_user_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->to_user_nick().data(), this->to_user_nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "c_dialogue_com.dialogue_talk_nt.to_user_nick");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes talking = 6 [default = ""];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_talking()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 talk_nt_state = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_talk_nt_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &talk_nt_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes talk_nt_desc = 8 [default = ""];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_talk_nt_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 socket = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_socket();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &socket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 to_socket = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_to_socket();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_socket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_dialogue_com.dialogue_talk_nt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_dialogue_com.dialogue_talk_nt)
  return false;
#undef DO_
}

void dialogue_talk_nt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_dialogue_com.dialogue_talk_nt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .b_error.info error = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  // optional uint64 user_id = 2 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional string user_nick = 3 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_nick().data(), this->user_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_dialogue_com.dialogue_talk_nt.user_nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_nick(), output);
  }

  // optional uint64 to_user_id = 4 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->to_user_id(), output);
  }

  // optional string to_user_nick = 5 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_user_nick().data(), this->to_user_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_dialogue_com.dialogue_talk_nt.to_user_nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->to_user_nick(), output);
  }

  // optional bytes talking = 6 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->talking(), output);
  }

  // optional uint32 talk_nt_state = 7 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->talk_nt_state(), output);
  }

  // optional bytes talk_nt_desc = 8 [default = ""];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->talk_nt_desc(), output);
  }

  // optional uint32 socket = 9 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->socket(), output);
  }

  // optional uint32 to_socket = 10 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->to_socket(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_dialogue_com.dialogue_talk_nt)
}

::google::protobuf::uint8* dialogue_talk_nt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_dialogue_com.dialogue_talk_nt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .b_error.info error = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, deterministic, target);
  }

  // optional uint64 user_id = 2 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional string user_nick = 3 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_nick().data(), this->user_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_dialogue_com.dialogue_talk_nt.user_nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_nick(), target);
  }

  // optional uint64 to_user_id = 4 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->to_user_id(), target);
  }

  // optional string to_user_nick = 5 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_user_nick().data(), this->to_user_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_dialogue_com.dialogue_talk_nt.to_user_nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->to_user_nick(), target);
  }

  // optional bytes talking = 6 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->talking(), target);
  }

  // optional uint32 talk_nt_state = 7 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->talk_nt_state(), target);
  }

  // optional bytes talk_nt_desc = 8 [default = ""];
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->talk_nt_desc(), target);
  }

  // optional uint32 socket = 9 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->socket(), target);
  }

  // optional uint32 to_socket = 10 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->to_socket(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_dialogue_com.dialogue_talk_nt)
  return target;
}

size_t dialogue_talk_nt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_dialogue_com.dialogue_talk_nt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string user_nick = 3 [default = ""];
    if (has_user_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_nick());
    }

    // optional string to_user_nick = 5 [default = ""];
    if (has_to_user_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_user_nick());
    }

    // optional bytes talking = 6 [default = ""];
    if (has_talking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->talking());
    }

    // optional bytes talk_nt_desc = 8 [default = ""];
    if (has_talk_nt_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->talk_nt_desc());
    }

    // optional .b_error.info error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->error_);
    }

    // optional uint64 user_id = 2 [default = 0];
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 to_user_id = 4 [default = 0];
    if (has_to_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_user_id());
    }

    // optional uint32 talk_nt_state = 7 [default = 0];
    if (has_talk_nt_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->talk_nt_state());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint32 socket = 9 [default = 0];
    if (has_socket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->socket());
    }

    // optional uint32 to_socket = 10 [default = 0];
    if (has_to_socket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to_socket());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dialogue_talk_nt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_dialogue_com.dialogue_talk_nt)
  GOOGLE_DCHECK_NE(&from, this);
  const dialogue_talk_nt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const dialogue_talk_nt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_dialogue_com.dialogue_talk_nt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_dialogue_com.dialogue_talk_nt)
    MergeFrom(*source);
  }
}

void dialogue_talk_nt::MergeFrom(const dialogue_talk_nt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_dialogue_com.dialogue_talk_nt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_user_nick();
      user_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_nick_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_to_user_nick();
      to_user_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_user_nick_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_talking();
      talking_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.talking_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_talk_nt_desc();
      talk_nt_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.talk_nt_desc_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_error()->::b_error::info::MergeFrom(from.error());
    }
    if (cached_has_bits & 0x00000020u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      to_user_id_ = from.to_user_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      talk_nt_state_ = from.talk_nt_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      socket_ = from.socket_;
    }
    if (cached_has_bits & 0x00000200u) {
      to_socket_ = from.to_socket_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void dialogue_talk_nt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_dialogue_com.dialogue_talk_nt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dialogue_talk_nt::CopyFrom(const dialogue_talk_nt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_dialogue_com.dialogue_talk_nt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dialogue_talk_nt::IsInitialized() const {
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void dialogue_talk_nt::Swap(dialogue_talk_nt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void dialogue_talk_nt::InternalSwap(dialogue_talk_nt* other) {
  user_nick_.Swap(&other->user_nick_);
  to_user_nick_.Swap(&other->to_user_nick_);
  talking_.Swap(&other->talking_);
  talk_nt_desc_.Swap(&other->talk_nt_desc_);
  std::swap(error_, other->error_);
  std::swap(user_id_, other->user_id_);
  std::swap(to_user_id_, other->to_user_id_);
  std::swap(talk_nt_state_, other->talk_nt_state_);
  std::swap(socket_, other->socket_);
  std::swap(to_socket_, other->to_socket_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata dialogue_talk_nt::GetMetadata() const {
  protobuf_c_5fdialogue_5fcom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fdialogue_5fcom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// dialogue_talk_nt

// optional .b_error.info error = 1;
bool dialogue_talk_nt::has_error() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void dialogue_talk_nt::set_has_error() {
  _has_bits_[0] |= 0x00000010u;
}
void dialogue_talk_nt::clear_has_error() {
  _has_bits_[0] &= ~0x00000010u;
}
void dialogue_talk_nt::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
const ::b_error::info& dialogue_talk_nt::error() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_nt.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
::b_error::info* dialogue_talk_nt::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_talk_nt.error)
  return error_;
}
::b_error::info* dialogue_talk_nt::release_error() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_talk_nt.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
void dialogue_talk_nt::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_talk_nt.error)
}

// optional uint64 user_id = 2 [default = 0];
bool dialogue_talk_nt::has_user_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void dialogue_talk_nt::set_has_user_id() {
  _has_bits_[0] |= 0x00000020u;
}
void dialogue_talk_nt::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void dialogue_talk_nt::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::uint64 dialogue_talk_nt::user_id() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_nt.user_id)
  return user_id_;
}
void dialogue_talk_nt::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_nt.user_id)
}

// optional string user_nick = 3 [default = ""];
bool dialogue_talk_nt::has_user_nick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void dialogue_talk_nt::set_has_user_nick() {
  _has_bits_[0] |= 0x00000001u;
}
void dialogue_talk_nt::clear_has_user_nick() {
  _has_bits_[0] &= ~0x00000001u;
}
void dialogue_talk_nt::clear_user_nick() {
  user_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_nick();
}
const ::std::string& dialogue_talk_nt::user_nick() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_nt.user_nick)
  return user_nick_.GetNoArena();
}
void dialogue_talk_nt::set_user_nick(const ::std::string& value) {
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_nt.user_nick)
}
#if LANG_CXX11
void dialogue_talk_nt::set_user_nick(::std::string&& value) {
  set_has_user_nick();
  user_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_com.dialogue_talk_nt.user_nick)
}
#endif
void dialogue_talk_nt::set_user_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_com.dialogue_talk_nt.user_nick)
}
void dialogue_talk_nt::set_user_nick(const char* value, size_t size) {
  set_has_user_nick();
  user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_com.dialogue_talk_nt.user_nick)
}
::std::string* dialogue_talk_nt::mutable_user_nick() {
  set_has_user_nick();
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_talk_nt.user_nick)
  return user_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dialogue_talk_nt::release_user_nick() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_talk_nt.user_nick)
  clear_has_user_nick();
  return user_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dialogue_talk_nt::set_allocated_user_nick(::std::string* user_nick) {
  if (user_nick != NULL) {
    set_has_user_nick();
  } else {
    clear_has_user_nick();
  }
  user_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_nick);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_talk_nt.user_nick)
}

// optional uint64 to_user_id = 4 [default = 0];
bool dialogue_talk_nt::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void dialogue_talk_nt::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000040u;
}
void dialogue_talk_nt::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void dialogue_talk_nt::clear_to_user_id() {
  to_user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_to_user_id();
}
::google::protobuf::uint64 dialogue_talk_nt::to_user_id() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_nt.to_user_id)
  return to_user_id_;
}
void dialogue_talk_nt::set_to_user_id(::google::protobuf::uint64 value) {
  set_has_to_user_id();
  to_user_id_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_nt.to_user_id)
}

// optional string to_user_nick = 5 [default = ""];
bool dialogue_talk_nt::has_to_user_nick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void dialogue_talk_nt::set_has_to_user_nick() {
  _has_bits_[0] |= 0x00000002u;
}
void dialogue_talk_nt::clear_has_to_user_nick() {
  _has_bits_[0] &= ~0x00000002u;
}
void dialogue_talk_nt::clear_to_user_nick() {
  to_user_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_user_nick();
}
const ::std::string& dialogue_talk_nt::to_user_nick() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_nt.to_user_nick)
  return to_user_nick_.GetNoArena();
}
void dialogue_talk_nt::set_to_user_nick(const ::std::string& value) {
  set_has_to_user_nick();
  to_user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_nt.to_user_nick)
}
#if LANG_CXX11
void dialogue_talk_nt::set_to_user_nick(::std::string&& value) {
  set_has_to_user_nick();
  to_user_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_com.dialogue_talk_nt.to_user_nick)
}
#endif
void dialogue_talk_nt::set_to_user_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_to_user_nick();
  to_user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_com.dialogue_talk_nt.to_user_nick)
}
void dialogue_talk_nt::set_to_user_nick(const char* value, size_t size) {
  set_has_to_user_nick();
  to_user_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_com.dialogue_talk_nt.to_user_nick)
}
::std::string* dialogue_talk_nt::mutable_to_user_nick() {
  set_has_to_user_nick();
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_talk_nt.to_user_nick)
  return to_user_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dialogue_talk_nt::release_to_user_nick() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_talk_nt.to_user_nick)
  clear_has_to_user_nick();
  return to_user_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dialogue_talk_nt::set_allocated_to_user_nick(::std::string* to_user_nick) {
  if (to_user_nick != NULL) {
    set_has_to_user_nick();
  } else {
    clear_has_to_user_nick();
  }
  to_user_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_user_nick);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_talk_nt.to_user_nick)
}

// optional bytes talking = 6 [default = ""];
bool dialogue_talk_nt::has_talking() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void dialogue_talk_nt::set_has_talking() {
  _has_bits_[0] |= 0x00000004u;
}
void dialogue_talk_nt::clear_has_talking() {
  _has_bits_[0] &= ~0x00000004u;
}
void dialogue_talk_nt::clear_talking() {
  talking_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_talking();
}
const ::std::string& dialogue_talk_nt::talking() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_nt.talking)
  return talking_.GetNoArena();
}
void dialogue_talk_nt::set_talking(const ::std::string& value) {
  set_has_talking();
  talking_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_nt.talking)
}
#if LANG_CXX11
void dialogue_talk_nt::set_talking(::std::string&& value) {
  set_has_talking();
  talking_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_com.dialogue_talk_nt.talking)
}
#endif
void dialogue_talk_nt::set_talking(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_talking();
  talking_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_com.dialogue_talk_nt.talking)
}
void dialogue_talk_nt::set_talking(const void* value, size_t size) {
  set_has_talking();
  talking_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_com.dialogue_talk_nt.talking)
}
::std::string* dialogue_talk_nt::mutable_talking() {
  set_has_talking();
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_talk_nt.talking)
  return talking_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dialogue_talk_nt::release_talking() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_talk_nt.talking)
  clear_has_talking();
  return talking_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dialogue_talk_nt::set_allocated_talking(::std::string* talking) {
  if (talking != NULL) {
    set_has_talking();
  } else {
    clear_has_talking();
  }
  talking_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), talking);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_talk_nt.talking)
}

// optional uint32 talk_nt_state = 7 [default = 0];
bool dialogue_talk_nt::has_talk_nt_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void dialogue_talk_nt::set_has_talk_nt_state() {
  _has_bits_[0] |= 0x00000080u;
}
void dialogue_talk_nt::clear_has_talk_nt_state() {
  _has_bits_[0] &= ~0x00000080u;
}
void dialogue_talk_nt::clear_talk_nt_state() {
  talk_nt_state_ = 0u;
  clear_has_talk_nt_state();
}
::google::protobuf::uint32 dialogue_talk_nt::talk_nt_state() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_nt.talk_nt_state)
  return talk_nt_state_;
}
void dialogue_talk_nt::set_talk_nt_state(::google::protobuf::uint32 value) {
  set_has_talk_nt_state();
  talk_nt_state_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_nt.talk_nt_state)
}

// optional bytes talk_nt_desc = 8 [default = ""];
bool dialogue_talk_nt::has_talk_nt_desc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void dialogue_talk_nt::set_has_talk_nt_desc() {
  _has_bits_[0] |= 0x00000008u;
}
void dialogue_talk_nt::clear_has_talk_nt_desc() {
  _has_bits_[0] &= ~0x00000008u;
}
void dialogue_talk_nt::clear_talk_nt_desc() {
  talk_nt_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_talk_nt_desc();
}
const ::std::string& dialogue_talk_nt::talk_nt_desc() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_nt.talk_nt_desc)
  return talk_nt_desc_.GetNoArena();
}
void dialogue_talk_nt::set_talk_nt_desc(const ::std::string& value) {
  set_has_talk_nt_desc();
  talk_nt_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_nt.talk_nt_desc)
}
#if LANG_CXX11
void dialogue_talk_nt::set_talk_nt_desc(::std::string&& value) {
  set_has_talk_nt_desc();
  talk_nt_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_dialogue_com.dialogue_talk_nt.talk_nt_desc)
}
#endif
void dialogue_talk_nt::set_talk_nt_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_talk_nt_desc();
  talk_nt_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_dialogue_com.dialogue_talk_nt.talk_nt_desc)
}
void dialogue_talk_nt::set_talk_nt_desc(const void* value, size_t size) {
  set_has_talk_nt_desc();
  talk_nt_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_dialogue_com.dialogue_talk_nt.talk_nt_desc)
}
::std::string* dialogue_talk_nt::mutable_talk_nt_desc() {
  set_has_talk_nt_desc();
  // @@protoc_insertion_point(field_mutable:c_dialogue_com.dialogue_talk_nt.talk_nt_desc)
  return talk_nt_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dialogue_talk_nt::release_talk_nt_desc() {
  // @@protoc_insertion_point(field_release:c_dialogue_com.dialogue_talk_nt.talk_nt_desc)
  clear_has_talk_nt_desc();
  return talk_nt_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dialogue_talk_nt::set_allocated_talk_nt_desc(::std::string* talk_nt_desc) {
  if (talk_nt_desc != NULL) {
    set_has_talk_nt_desc();
  } else {
    clear_has_talk_nt_desc();
  }
  talk_nt_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), talk_nt_desc);
  // @@protoc_insertion_point(field_set_allocated:c_dialogue_com.dialogue_talk_nt.talk_nt_desc)
}

// optional uint32 socket = 9 [default = 0];
bool dialogue_talk_nt::has_socket() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void dialogue_talk_nt::set_has_socket() {
  _has_bits_[0] |= 0x00000100u;
}
void dialogue_talk_nt::clear_has_socket() {
  _has_bits_[0] &= ~0x00000100u;
}
void dialogue_talk_nt::clear_socket() {
  socket_ = 0u;
  clear_has_socket();
}
::google::protobuf::uint32 dialogue_talk_nt::socket() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_nt.socket)
  return socket_;
}
void dialogue_talk_nt::set_socket(::google::protobuf::uint32 value) {
  set_has_socket();
  socket_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_nt.socket)
}

// optional uint32 to_socket = 10 [default = 0];
bool dialogue_talk_nt::has_to_socket() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void dialogue_talk_nt::set_has_to_socket() {
  _has_bits_[0] |= 0x00000200u;
}
void dialogue_talk_nt::clear_has_to_socket() {
  _has_bits_[0] &= ~0x00000200u;
}
void dialogue_talk_nt::clear_to_socket() {
  to_socket_ = 0u;
  clear_has_to_socket();
}
::google::protobuf::uint32 dialogue_talk_nt::to_socket() const {
  // @@protoc_insertion_point(field_get:c_dialogue_com.dialogue_talk_nt.to_socket)
  return to_socket_;
}
void dialogue_talk_nt::set_to_socket(::google::protobuf::uint32 value) {
  set_has_to_socket();
  to_socket_ = value;
  // @@protoc_insertion_point(field_set:c_dialogue_com.dialogue_talk_nt.to_socket)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace c_dialogue_com

// @@protoc_insertion_point(global_scope)
