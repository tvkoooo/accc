0.c++中类型class与c++的struct,和c中的struct的异同.
a.这三者都是数据结构的关键字.
b.struct在c++中和class语义一致.
c.不同的是c++的struct默认是private,c++的class默认是public权限.
d.c中的struct只能包含函数指针,没有权限概念,c++中可以以语法糖的形式包含成员函数.
e.c中没有class.
f.在c中制作数据结构时,所有聚焦于目标数据结构的函数类比于c++的成员函数.且习惯上这些函数名会以目标结构做前缀.
g.c中设计聚焦于目标数据结构函数集时,每个函数都会将目标结构作为第一个参数传入,这个类比于c++的this.

1.函数签名函数重载和编译后函数名生成机制及隐式转化
a.在c中没有函数重载
b.对于静态函数而言形如void func1(int);c的函数名大致为_func1,c++大致为_func1_int.
c.对于函数重载,c++是以为函数添加形参类型后缀来区分的.
d.对于这两种编译后函数生成机制,必须手动告诉编译器,引用的头文件函数到底使用的是哪种,将c的函数包以extern "C",使c++能够进行正确连接成为必要条件.

2.多态种类和实现方式
a.在c中没有多态
b.c++中多态分编译期多态和运行期多态两种.
c.编译期多态是以模板和型别推导实现的.
d.运行期多态是以虚函数表和继承实现的.

3.拓展的基础数据结构和标准库
a.标准c的库内容相对较少,c++标准库内容较多.c++编译模式中包含并兼容标准c.
b.按标准c写的内容不允许包含任何c++拓展内容,语法更古典.
c.c++需要熟练掌握容器的种类和适用范围,大致实现它们的数据结构,遍历方式,和遍历误区.
d.标准c++的字符串类型和标准输入输出工具集的使用.
e.const在c++中是推荐经常使用的数据限定符号.
f.c++模板和c宏的异同,模板更安全,且可断点调试.
g.模板的适用范围和滥用误区.标准c++中的容器基本是模板实现的,模板嵌套层次过深导致阅读困难.而绝大部分情况下不需要模板.

4.c和c++的适用范围,脚本模块
a.c的大致适用范围:
    .c作为软件硬件接口和其简介运行期高效,主要适用于需要高效运行和硬件驱动的场合.
    .成熟工具集的增强实现版本.如图片和视频编码.
	.脚本或高级语言系统的编译和运行承载体,脚本如php和lua,python等.高级语言如c++,java等.
	.操作系统内核的编写.如linux和windows.
b.c++的大致适用范围:
    .庞大的工具集使得开发周期变短,但损失了运行效率和编译目标大小.主要做应用工具.
	.渲染引擎和物理引擎等较复杂的逻辑部分.
	.各种开发工具基础架构.
c.脚本的大致适用范围
    .脚本舍弃了大部分运行时效率获得了无与伦比的灵活性和简洁性且是运行时编译或预编译,使开发周期大大缩短.
    .作为逻辑部分嵌入到高效运行的宿主,如嵌入到c或c++.
	.作为客户的可编程拓展,来获得便利灵活性.
	.作为策划替换业务逻辑或微调逻辑的最佳预选方案.
	.快速的产品原型生成方案.
	.日常重复业务的工具集合开发工具.
	