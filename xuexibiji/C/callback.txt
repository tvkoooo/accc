##需要做的事
mm_producer 不知道mm_builder和mm_consumer的结构,他是事件生产者.
mm_consumer 不知道mm_builder和mm_producer的结构,他是事件消费者.
mm_builder  知道 mm_producer和mm_consumer的结构,他是构建者
三者可以共用一个mm_message结构.

mm_builder 创建了mm_producer和mm_consumer.并且将mm_consumer和mm_producer连接起来.

##达到这个目的的方法
mm_producer (A)的
```
typedef void (*producer_handle)( void* obj, struct mm_message* message );
struct mm_producer_callback
{
	producer_handle handle;
	void* obj;// weak ref. user data for callback.
};

mm_producer的大致结构
struct mm_producer
{
	struct mm_producer_callback callback;
	// 和其他东西
}

mm_producer 的一个设置函数
MM_EXPORT_DLL void mm_producer_assign_callback(struct mm_producer* p,struct mm_producer_callback callback);

mm_producer 里会将消息发布
(*(p->callback))(p,message);
```

mm_consumer (B)的
```
mm_consumer 会实现自己的处理函数
void mm_consumer_handle( struct mm_consumer* p, struct mm_message* message )
{
	// 用xxx
}
```

mm_builder (C)的
```
mm_builder的大致结构
struct mm_builder
{
	mm_producer producer
	mm_consumer consumer;
	// 和其他东西
}

// 前置函数声明
void __static_builder_producer_handle( void* obj, struct mm_message* message );

void mm_builder_init()
{
	mm_producer_init(&p->producer);
	mm_consumer_init(&p->consumer);
	
	struct mm_producer_callback callback;
	callback.handle = &__static_builder_producer_handle;
	callback.obj = &p->consumer;
	// 连接起来
	mm_producer_assign_callback(&p->producer,&callback);
}

mm_builder 会实现mm_producer(A)的回调函数
void __static_builder_producer_handle( void* obj, struct mm_message* message )
{
	struct mm_producer* producer = (struct mm_producer*)(obj);
	struct mm_consumer* consumer = (struct mm_consumer*)(producer->callback.obj);
	// 驱动过程
	mm_consumer_handle(consumer,message);
}
```